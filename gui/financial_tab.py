#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Financial management tab for ChViet Mobile Store Management System
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, date, timedelta
import calendar

from models import Transaction
from config import BUSINESS_RULES

class FinancialTab:
    def __init__(self, parent, db_manager, current_user):
        self.parent = parent
        self.db_manager = db_manager
        self.current_user = current_user
        
        self.frame = ttk.Frame(parent)
        self.setup_ui()
        self.load_data()
    
    def setup_ui(self):
        """Setup financial tab UI"""
        # Main container
        main_container = ttk.Frame(self.frame)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create notebook for sub-tabs
        self.notebook = ttk.Notebook(main_container)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Dashboard tab
        self.setup_dashboard_tab()
        
        # Transactions tab
        self.setup_transactions_tab()
        
        # Debts tab
        self.setup_debts_tab()
        
        # Cash Flow tab
        self.setup_cash_flow_tab()
    
    def setup_dashboard_tab(self):
        """Setup financial dashboard tab"""
        dashboard_frame = ttk.Frame(self.notebook)
        self.notebook.add(dashboard_frame, text="T·ªïng Quan")
        
        # Top summary cards
        summary_frame = ttk.Frame(dashboard_frame)
        summary_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Revenue card
        revenue_card = ttk.LabelFrame(summary_frame, text="Doanh thu h√¥m nay", padding=10)
        revenue_card.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        self.today_revenue_label = ttk.Label(revenue_card, text="0 VNƒê", 
                                           style="Success.TLabel", font=('Arial', 16, 'bold'))
        self.today_revenue_label.pack()
        
        # Expenses card
        expenses_card = ttk.LabelFrame(summary_frame, text="Chi ph√≠ h√¥m nay", padding=10)
        expenses_card.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        self.today_expenses_label = ttk.Label(expenses_card, text="0 VNƒê", 
                                            style="Error.TLabel", font=('Arial', 16, 'bold'))
        self.today_expenses_label.pack()
        
        # Profit card
        profit_card = ttk.LabelFrame(summary_frame, text="L·ª£i nhu·∫≠n h√¥m nay", padding=10)
        profit_card.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        self.today_profit_label = ttk.Label(profit_card, text="0 VNƒê", 
                                          font=('Arial', 16, 'bold'))
        self.today_profit_label.pack()
        
        # Cash on hand card
        cash_card = ttk.LabelFrame(summary_frame, text="Ti·ªÅn m·∫∑t", padding=10)
        cash_card.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        self.cash_on_hand_label = ttk.Label(cash_card, text="0 VNƒê", 
                                          style="Warning.TLabel", font=('Arial', 16, 'bold'))
        self.cash_on_hand_label.pack()
        
        # Monthly comparison
        monthly_frame = ttk.LabelFrame(dashboard_frame, text="So s√°nh theo th√°ng", padding=10)
        monthly_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # Month selector
        month_selector_frame = ttk.Frame(monthly_frame)
        month_selector_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(month_selector_frame, text="Th√°ng:").pack(side=tk.LEFT)
        self.selected_month_var = tk.StringVar(value=str(date.today().month))
        month_combo = ttk.Combobox(month_selector_frame, textvariable=self.selected_month_var, 
                                  values=list(range(1, 13)), width=10, state="readonly")
        month_combo.pack(side=tk.LEFT, padx=5)
        
        ttk.Label(month_selector_frame, text="NƒÉm:").pack(side=tk.LEFT, padx=(20, 0))
        self.selected_year_var = tk.StringVar(value=str(date.today().year))
        year_combo = ttk.Combobox(month_selector_frame, textvariable=self.selected_year_var,
                                 values=list(range(2020, 2030)), width=10, state="readonly")
        year_combo.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(month_selector_frame, text="üîÑ C·∫≠p nh·∫≠t", 
                  command=self.update_monthly_data).pack(side=tk.LEFT, padx=20)
        
        # Monthly statistics
        monthly_stats_frame = ttk.Frame(monthly_frame)
        monthly_stats_frame.pack(fill=tk.X)
        
        # This month
        this_month_frame = ttk.LabelFrame(monthly_stats_frame, text="Th√°ng n√†y", padding=10)
        this_month_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        self.this_month_revenue_label = ttk.Label(this_month_frame, text="Doanh thu: 0 VNƒê")
        self.this_month_revenue_label.pack(anchor=tk.W)
        
        self.this_month_expenses_label = ttk.Label(this_month_frame, text="Chi ph√≠: 0 VNƒê")
        self.this_month_expenses_label.pack(anchor=tk.W)
        
        self.this_month_profit_label = ttk.Label(this_month_frame, text="L·ª£i nhu·∫≠n: 0 VNƒê", 
                                               font=('Arial', 10, 'bold'))
        self.this_month_profit_label.pack(anchor=tk.W)
        
        # Last month
        last_month_frame = ttk.LabelFrame(monthly_stats_frame, text="Th√°ng tr∆∞·ªõc", padding=10)
        last_month_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        self.last_month_revenue_label = ttk.Label(last_month_frame, text="Doanh thu: 0 VNƒê")
        self.last_month_revenue_label.pack(anchor=tk.W)
        
        self.last_month_expenses_label = ttk.Label(last_month_frame, text="Chi ph√≠: 0 VNƒê")
        self.last_month_expenses_label.pack(anchor=tk.W)
        
        self.last_month_profit_label = ttk.Label(last_month_frame, text="L·ª£i nhu·∫≠n: 0 VNƒê", 
                                               font=('Arial', 10, 'bold'))
        self.last_month_profit_label.pack(anchor=tk.W)
        
        # Growth comparison
        growth_frame = ttk.LabelFrame(monthly_stats_frame, text="TƒÉng tr∆∞·ªüng", padding=10)
        growth_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        self.revenue_growth_label = ttk.Label(growth_frame, text="Doanh thu: 0%")
        self.revenue_growth_label.pack(anchor=tk.W)
        
        self.profit_growth_label = ttk.Label(growth_frame, text="L·ª£i nhu·∫≠n: 0%")
        self.profit_growth_label.pack(anchor=tk.W)
        
        # Quick actions
        actions_frame = ttk.LabelFrame(dashboard_frame, text="Thao t√°c nhanh", padding=10)
        actions_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        ttk.Button(actions_frame, text="‚ûï Thu ti·ªÅn", 
                  command=self.quick_income).pack(side=tk.LEFT, padx=5)
        ttk.Button(actions_frame, text="‚ûñ Chi ti·ªÅn", 
                  command=self.quick_expense).pack(side=tk.LEFT, padx=5)
        ttk.Button(actions_frame, text="üí∞ Ki·ªÉm k√™ ti·ªÅn m·∫∑t", 
                  command=self.cash_count).pack(side=tk.LEFT, padx=5)
        ttk.Button(actions_frame, text="üìä B√°o c√°o nhanh", 
                  command=self.quick_report).pack(side=tk.LEFT, padx=5)
        
        # Recent transactions
        recent_frame = ttk.LabelFrame(dashboard_frame, text="Giao d·ªãch g·∫ßn ƒë√¢y", padding=10)
        recent_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        self.recent_transactions_tree = ttk.Treeview(recent_frame,
                                                   columns=('time', 'type', 'amount', 'description'),
                                                   show='headings', height=8)
        
        self.recent_transactions_tree.heading('time', text='Th·ªùi gian')
        self.recent_transactions_tree.heading('type', text='Lo·∫°i')
        self.recent_transactions_tree.heading('amount', text='S·ªë ti·ªÅn')
        self.recent_transactions_tree.heading('description', text='M√¥ t·∫£')
        
        self.recent_transactions_tree.column('time', width=120)
        self.recent_transactions_tree.column('type', width=80)
        self.recent_transactions_tree.column('amount', width=100)
        self.recent_transactions_tree.column('description', width=250)
        
        self.recent_transactions_tree.pack(fill=tk.BOTH, expand=True)
    
    def setup_transactions_tab(self):
        """Setup transactions management tab"""
        transactions_frame = ttk.Frame(self.notebook)
        self.notebook.add(transactions_frame, text="Giao D·ªãch")
        
        # Top controls
        top_frame = ttk.Frame(transactions_frame)
        top_frame.pack(fill=tk.X, pady=(10, 10), padx=10)
        
        # Date filter
        date_frame = ttk.LabelFrame(top_frame, text="L·ªçc theo ng√†y", padding=10)
        date_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Label(date_frame, text="T·ª´:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.trans_from_date_var = tk.StringVar(value=date.today().strftime('%Y-%m-%d'))
        from_date_entry = ttk.Entry(date_frame, textvariable=self.trans_from_date_var, width=12)
        from_date_entry.grid(row=0, column=1, padx=5, pady=2)
        
        ttk.Label(date_frame, text="ƒê·∫øn:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.trans_to_date_var = tk.StringVar(value=date.today().strftime('%Y-%m-%d'))
        to_date_entry = ttk.Entry(date_frame, textvariable=self.trans_to_date_var, width=12)
        to_date_entry.grid(row=1, column=1, padx=5, pady=2)
        
        ttk.Button(date_frame, text="üîç L·ªçc", 
                  command=self.filter_transactions).grid(row=2, column=0, columnspan=2, pady=5)
        
        # Type filter
        type_frame = ttk.LabelFrame(top_frame, text="Lo·∫°i giao d·ªãch", padding=10)
        type_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        self.transaction_type_filter_var = tk.StringVar(value="all")
        type_values = [
            ("all", "T·∫•t c·∫£"),
            ("income", "Thu"),
            ("expense", "Chi")
        ]
        
        for value, text in type_values:
            ttk.Radiobutton(type_frame, text=text, variable=self.transaction_type_filter_var,
                           value=value, command=self.filter_transactions).pack(anchor=tk.W)
        
        # Control buttons
        btn_frame = ttk.Frame(top_frame)
        btn_frame.pack(side=tk.RIGHT)
        
        ttk.Button(btn_frame, text="‚ûï Thu ti·ªÅn", 
                  command=self.add_income).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="‚ûñ Chi ti·ªÅn", 
                  command=self.add_expense).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="‚úèÔ∏è S·ª≠a", 
                  command=self.edit_transaction).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="üóëÔ∏è X√≥a", 
                  command=self.delete_transaction).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="üîÑ L√†m m·ªõi", 
                  command=self.refresh_transactions).pack(pady=2, fill=tk.X)
        
        # Transactions treeview
        tree_frame = ttk.Frame(transactions_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL)
        h_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.HORIZONTAL)
        
        self.transactions_tree = ttk.Treeview(tree_frame,
                                            columns=('id', 'date', 'type', 'amount', 'description',
                                                   'payment_method', 'reference', 'staff'),
                                            show='headings',
                                            yscrollcommand=v_scrollbar.set,
                                            xscrollcommand=h_scrollbar.set)
        
        # Configure scrollbars
        v_scrollbar.config(command=self.transactions_tree.yview)
        h_scrollbar.config(command=self.transactions_tree.xview)
        
        # Column headings
        columns = {
            'id': ('ID', 50),
            'date': ('Ng√†y', 120),
            'type': ('Lo·∫°i', 80),
            'amount': ('S·ªë ti·ªÅn', 100),
            'description': ('M√¥ t·∫£', 250),
            'payment_method': ('H√¨nh th·ª©c', 100),
            'reference': ('Tham chi·∫øu', 120),
            'staff': ('Nh√¢n vi√™n', 120)
        }
        
        for col, (heading, width) in columns.items():
            self.transactions_tree.heading(col, text=heading)
            self.transactions_tree.column(col, width=width, minwidth=50)
        
        # Pack treeview and scrollbars
        self.transactions_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Bind double-click
        self.transactions_tree.bind('<Double-1>', lambda e: self.edit_transaction())
    
    def setup_debts_tab(self):
        """Setup debts management tab"""
        debts_frame = ttk.Frame(self.notebook)
        self.notebook.add(debts_frame, text="C√¥ng N·ª£")
        
        # Create sub-notebook for customer and supplier debts
        debts_notebook = ttk.Notebook(debts_frame)
        debts_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Customer debts
        customer_debts_frame = ttk.Frame(debts_notebook)
        debts_notebook.add(customer_debts_frame, text="N·ª£ Kh√°ch H√†ng")
        
        # Customer debts controls
        customer_top_frame = ttk.Frame(customer_debts_frame)
        customer_top_frame.pack(fill=tk.X, pady=(10, 10))
        
        ttk.Button(customer_top_frame, text="‚ûï Th√™m n·ª£", 
                  command=self.add_customer_debt).pack(side=tk.LEFT, padx=5)
        ttk.Button(customer_top_frame, text="üí∞ Thu n·ª£", 
                  command=self.collect_customer_debt).pack(side=tk.LEFT, padx=5)
        ttk.Button(customer_top_frame, text="üìä Sao k√™", 
                  command=self.customer_debt_statement).pack(side=tk.LEFT, padx=5)
        
        # Customer debts treeview
        self.customer_debts_tree = ttk.Treeview(customer_debts_frame,
                                              columns=('customer', 'amount', 'description', 'due_date', 'overdue_days'),
                                              show='headings')
        
        columns = {
            'customer': ('Kh√°ch h√†ng', 200),
            'amount': ('S·ªë n·ª£', 100),
            'description': ('M√¥ t·∫£', 250),
            'due_date': ('H·∫°n tr·∫£', 100),
            'overdue_days': ('Qu√° h·∫°n', 80)
        }
        
        for col, (heading, width) in columns.items():
            self.customer_debts_tree.heading(col, text=heading)
            self.customer_debts_tree.column(col, width=width, minwidth=50)
        
        self.customer_debts_tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # Supplier debts
        supplier_debts_frame = ttk.Frame(debts_notebook)
        debts_notebook.add(supplier_debts_frame, text="N·ª£ Nh√† Cung C·∫•p")
        
        # Supplier debts controls
        supplier_top_frame = ttk.Frame(supplier_debts_frame)
        supplier_top_frame.pack(fill=tk.X, pady=(10, 10))
        
        ttk.Button(supplier_top_frame, text="‚ûï Th√™m n·ª£", 
                  command=self.add_supplier_debt).pack(side=tk.LEFT, padx=5)
        ttk.Button(supplier_top_frame, text="üí∞ Tr·∫£ n·ª£", 
                  command=self.pay_supplier_debt).pack(side=tk.LEFT, padx=5)
        ttk.Button(supplier_top_frame, text="üìä Sao k√™", 
                  command=self.supplier_debt_statement).pack(side=tk.LEFT, padx=5)
        
        # Supplier debts treeview
        self.supplier_debts_tree = ttk.Treeview(supplier_debts_frame,
                                              columns=('supplier', 'amount', 'description', 'due_date', 'overdue_days'),
                                              show='headings')
        
        for col, (heading, width) in columns.items():
            self.supplier_debts_tree.heading(col, text=heading)
            self.supplier_debts_tree.column(col, width=width, minwidth=50)
        
        self.supplier_debts_tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
    
    def setup_cash_flow_tab(self):
        """Setup cash flow management tab"""
        cash_flow_frame = ttk.Frame(self.notebook)
        self.notebook.add(cash_flow_frame, text="D√≤ng Ti·ªÅn")
        
        # Cash sources
        sources_frame = ttk.LabelFrame(cash_flow_frame, text="Ngu·ªìn ti·ªÅn", padding=10)
        sources_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Cash sources treeview
        self.cash_sources_tree = ttk.Treeview(sources_frame,
                                            columns=('source', 'amount', 'last_updated'),
                                            show='headings', height=6)
        
        self.cash_sources_tree.heading('source', text='Ngu·ªìn')
        self.cash_sources_tree.heading('amount', text='S·ªë ti·ªÅn')
        self.cash_sources_tree.heading('last_updated', text='C·∫≠p nh·∫≠t l·∫ßn cu·ªëi')
        
        self.cash_sources_tree.column('source', width=200)
        self.cash_sources_tree.column('amount', width=150)
        self.cash_sources_tree.column('last_updated', width=150)
        
        self.cash_sources_tree.pack(fill=tk.X, pady=(0, 10))
        
        # Cash source controls
        source_controls = ttk.Frame(sources_frame)
        source_controls.pack(fill=tk.X)
        
        ttk.Button(source_controls, text="‚ûï Th√™m ngu·ªìn", 
                  command=self.add_cash_source).pack(side=tk.LEFT, padx=5)
        ttk.Button(source_controls, text="‚úèÔ∏è S·ª≠a", 
                  command=self.edit_cash_source).pack(side=tk.LEFT, padx=5)
        ttk.Button(source_controls, text="üí∞ ƒêi·ªÅu ch·ªânh", 
                  command=self.adjust_cash_source).pack(side=tk.LEFT, padx=5)
        
        # Daily cash flow
        daily_flow_frame = ttk.LabelFrame(cash_flow_frame, text="D√≤ng ti·ªÅn h√†ng ng√†y", padding=10)
        daily_flow_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # Date selector
        date_selector = ttk.Frame(daily_flow_frame)
        date_selector.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(date_selector, text="Ng√†y:").pack(side=tk.LEFT)
        self.cash_flow_date_var = tk.StringVar(value=date.today().strftime('%Y-%m-%d'))
        date_entry = ttk.Entry(date_selector, textvariable=self.cash_flow_date_var, width=12)
        date_entry.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(date_selector, text="üìä Xem", 
                  command=self.view_daily_cash_flow).pack(side=tk.LEFT, padx=10)
        ttk.Button(date_selector, text="üìÑ B√°o c√°o", 
                  command=self.generate_cash_flow_report).pack(side=tk.LEFT, padx=5)
        
        # Cash flow summary
        self.cash_flow_text = tk.Text(daily_flow_frame, height=15, wrap=tk.WORD, font=('Consolas', 10))
        self.cash_flow_text.pack(fill=tk.BOTH, expand=True)
        
        # Cash flow scrollbar
        cash_flow_scrollbar = ttk.Scrollbar(daily_flow_frame, orient=tk.VERTICAL, command=self.cash_flow_text.yview)
        self.cash_flow_text.config(yscrollcommand=cash_flow_scrollbar.set)
    
    def load_data(self):
        """Load all financial data"""
        self.refresh_dashboard()
        self.refresh_transactions()
        self.refresh_debts()
        self.refresh_cash_sources()
    
    def refresh_dashboard(self):
        """Refresh dashboard data"""
        try:
            # Today's data
            today = date.today().strftime('%Y-%m-%d')
            
            # Today's revenue
            today_revenue = self.db_manager.fetch_one(
                """SELECT COALESCE(SUM(amount), 0) as total 
                   FROM transactions 
                   WHERE transaction_type = 'income' AND DATE(transaction_date) = ?""",
                (today,)
            )
            self.today_revenue_label.config(text=f"{today_revenue['total']:,.0f} VNƒê")
            
            # Today's expenses
            today_expenses = self.db_manager.fetch_one(
                """SELECT COALESCE(SUM(amount), 0) as total 
                   FROM transactions 
                   WHERE transaction_type = 'expense' AND DATE(transaction_date) = ?""",
                (today,)
            )
            self.today_expenses_label.config(text=f"{today_expenses['total']:,.0f} VNƒê")
            
            # Today's profit
            today_profit = today_revenue['total'] - today_expenses['total']
            self.today_profit_label.config(text=f"{today_profit:,.0f} VNƒê")
            
            # Set profit color
            if today_profit > 0:
                self.today_profit_label.config(style="Success.TLabel")
            elif today_profit < 0:
                self.today_profit_label.config(style="Error.TLabel")
            else:
                self.today_profit_label.config(style="")
            
            # Cash on hand (this would be calculated from cash sources)
            self.cash_on_hand_label.config(text="0 VNƒê")
            
            # Load recent transactions
            self.load_recent_transactions()
            
            # Update monthly data
            self.update_monthly_data()
            
        except Exception as e:
            print(f"Error refreshing dashboard: {e}")
    
    def load_recent_transactions(self):
        """Load recent transactions for dashboard"""
        # Clear existing items
        for item in self.recent_transactions_tree.get_children():
            self.recent_transactions_tree.delete(item)
        
        # Load recent transactions
        transactions = self.db_manager.fetch_all(
            """SELECT * FROM transactions 
               ORDER BY transaction_date DESC 
               LIMIT 10"""
        )
        
        for trans in transactions:
            trans_time = datetime.fromisoformat(trans['transaction_date']).strftime('%H:%M')
            trans_type = "Thu" if trans['transaction_type'] == 'income' else "Chi"
            
            self.recent_transactions_tree.insert('', 'end', values=(
                trans_time,
                trans_type,
                f"{trans['amount']:,.0f}",
                trans['description'][:50] + "..." if len(trans['description']) > 50 else trans['description']
            ))
    
    def update_monthly_data(self):
        """Update monthly comparison data"""
        try:
            selected_month = int(self.selected_month_var.get())
            selected_year = int(self.selected_year_var.get())
            
            # This month
            this_month_start = date(selected_year, selected_month, 1)
            if selected_month == 12:
                this_month_end = date(selected_year + 1, 1, 1) - timedelta(days=1)
            else:
                this_month_end = date(selected_year, selected_month + 1, 1) - timedelta(days=1)
            
            # This month revenue
            this_month_revenue = self.db_manager.fetch_one(
                """SELECT COALESCE(SUM(amount), 0) as total 
                   FROM transactions 
                   WHERE transaction_type = 'income' 
                   AND DATE(transaction_date) BETWEEN ? AND ?""",
                (this_month_start.strftime('%Y-%m-%d'), this_month_end.strftime('%Y-%m-%d'))
            )
            
            # This month expenses
            this_month_expenses = self.db_manager.fetch_one(
                """SELECT COALESCE(SUM(amount), 0) as total 
                   FROM transactions 
                   WHERE transaction_type = 'expense' 
                   AND DATE(transaction_date) BETWEEN ? AND ?""",
                (this_month_start.strftime('%Y-%m-%d'), this_month_end.strftime('%Y-%m-%d'))
            )
            
            this_month_profit = this_month_revenue['total'] - this_month_expenses['total']
            
            self.this_month_revenue_label.config(text=f"Doanh thu: {this_month_revenue['total']:,.0f} VNƒê")
            self.this_month_expenses_label.config(text=f"Chi ph√≠: {this_month_expenses['total']:,.0f} VNƒê")
            self.this_month_profit_label.config(text=f"L·ª£i nhu·∫≠n: {this_month_profit:,.0f} VNƒê")
            
            # Last month
            if selected_month == 1:
                last_month = 12
                last_year = selected_year - 1
            else:
                last_month = selected_month - 1
                last_year = selected_year
            
            last_month_start = date(last_year, last_month, 1)
            last_month_end = date(selected_year, selected_month, 1) - timedelta(days=1)
            
            # Last month revenue
            last_month_revenue = self.db_manager.fetch_one(
                """SELECT COALESCE(SUM(amount), 0) as total 
                   FROM transactions 
                   WHERE transaction_type = 'income' 
                   AND DATE(transaction_date) BETWEEN ? AND ?""",
                (last_month_start.strftime('%Y-%m-%d'), last_month_end.strftime('%Y-%m-%d'))
            )
            
            # Last month expenses
            last_month_expenses = self.db_manager.fetch_one(
                """SELECT COALESCE(SUM(amount), 0) as total 
                   FROM transactions 
                   WHERE transaction_type = 'expense' 
                   AND DATE(transaction_date) BETWEEN ? AND ?""",
                (last_month_start.strftime('%Y-%m-%d'), last_month_end.strftime('%Y-%m-%d'))
            )
            
            last_month_profit = last_month_revenue['total'] - last_month_expenses['total']
            
            self.last_month_revenue_label.config(text=f"Doanh thu: {last_month_revenue['total']:,.0f} VNƒê")
            self.last_month_expenses_label.config(text=f"Chi ph√≠: {last_month_expenses['total']:,.0f} VNƒê")
            self.last_month_profit_label.config(text=f"L·ª£i nhu·∫≠n: {last_month_profit:,.0f} VNƒê")
            
            # Calculate growth
            revenue_growth = 0
            profit_growth = 0
            
            if last_month_revenue['total'] > 0:
                revenue_growth = ((this_month_revenue['total'] - last_month_revenue['total']) / last_month_revenue['total']) * 100
            
            if last_month_profit != 0:
                profit_growth = ((this_month_profit - last_month_profit) / abs(last_month_profit)) * 100
            
            self.revenue_growth_label.config(text=f"Doanh thu: {revenue_growth:+.1f}%")
            self.profit_growth_label.config(text=f"L·ª£i nhu·∫≠n: {profit_growth:+.1f}%")
            
        except Exception as e:
            print(f"Error updating monthly data: {e}")
    
    def quick_income(self):
        """Quick income entry"""
        self.show_transaction_dialog(transaction_type='income')
    
    def quick_expense(self):
        """Quick expense entry"""
        self.show_transaction_dialog(transaction_type='expense')
    
    def cash_count(self):
        """Cash counting dialog"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ki·ªÉm k√™ ti·ªÅn m·∫∑t s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def quick_report(self):
        """Generate quick financial report"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng b√°o c√°o nhanh s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def refresh_transactions(self):
        """Refresh transactions list"""
        # Clear existing items
        for item in self.transactions_tree.get_children():
            self.transactions_tree.delete(item)
        
        # Load transactions
        query = """
        SELECT t.*, s.full_name as staff_name
        FROM transactions t
        LEFT JOIN staff s ON t.staff_id = s.id
        ORDER BY t.transaction_date DESC
        LIMIT 1000
        """
        
        transactions = self.db_manager.fetch_all(query)
        
        for trans in transactions:
            trans_date = datetime.fromisoformat(trans['transaction_date']).strftime('%d/%m/%Y %H:%M')
            trans_type = "Thu" if trans['transaction_type'] == 'income' else "Chi"
            
            # Format reference
            reference = ""
            if trans['reference_type'] and trans['reference_id']:
                reference = f"{trans['reference_type']}#{trans['reference_id']}"
            
            self.transactions_tree.insert('', 'end', values=(
                trans['id'],
                trans_date,
                trans_type,
                f"{trans['amount']:,.0f}",
                trans['description'] or '',
                trans['payment_method'] or '',
                reference,
                trans['staff_name'] or ''
            ))
    
    def filter_transactions(self):
        """Filter transactions by date and type"""
        from_date = self.trans_from_date_var.get()
        to_date = self.trans_to_date_var.get()
        trans_type = self.transaction_type_filter_var.get()
        
        if not from_date or not to_date:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß kho·∫£ng th·ªùi gian!")
            return
        
        # Clear existing items
        for item in self.transactions_tree.get_children():
            self.transactions_tree.delete(item)
        
        # Build query
        if trans_type == "all":
            query = """
            SELECT t.*, s.full_name as staff_name
            FROM transactions t
            LEFT JOIN staff s ON t.staff_id = s.id
            WHERE DATE(t.transaction_date) BETWEEN ? AND ?
            ORDER BY t.transaction_date DESC
            """
            params = (from_date, to_date)
        else:
            query = """
            SELECT t.*, s.full_name as staff_name
            FROM transactions t
            LEFT JOIN staff s ON t.staff_id = s.id
            WHERE DATE(t.transaction_date) BETWEEN ? AND ? AND t.transaction_type = ?
            ORDER BY t.transaction_date DESC
            """
            params = (from_date, to_date, trans_type)
        
        transactions = self.db_manager.fetch_all(query, params)
        
        for trans in transactions:
            trans_date = datetime.fromisoformat(trans['transaction_date']).strftime('%d/%m/%Y %H:%M')
            trans_type_display = "Thu" if trans['transaction_type'] == 'income' else "Chi"
            
            reference = ""
            if trans['reference_type'] and trans['reference_id']:
                reference = f"{trans['reference_type']}#{trans['reference_id']}"
            
            self.transactions_tree.insert('', 'end', values=(
                trans['id'],
                trans_date,
                trans_type_display,
                f"{trans['amount']:,.0f}",
                trans['description'] or '',
                trans['payment_method'] or '',
                reference,
                trans['staff_name'] or ''
            ))
    
    def add_income(self):
        """Add income transaction"""
        self.show_transaction_dialog(transaction_type='income')
    
    def add_expense(self):
        """Add expense transaction"""
        self.show_transaction_dialog(transaction_type='expense')
    
    def show_transaction_dialog(self, transaction_id=None, transaction_type='income'):
        """Show add/edit transaction dialog"""
        dialog = tk.Toplevel(self.frame)
        dialog.title("Thu ti·ªÅn" if transaction_type == 'income' else "Chi ti·ªÅn")
        dialog.geometry("500x400")
        dialog.transient(self.frame)
        dialog.grab_set()
        
        # Load existing transaction data if editing
        transaction_data = {}
        if transaction_id:
            trans = self.db_manager.fetch_one("SELECT * FROM transactions WHERE id = ?", (transaction_id,))
            if trans:
                transaction_data = dict(trans)
                transaction_type = transaction_data['transaction_type']
        
        # Main frame
        main_frame = ttk.Frame(dialog, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        row = 0
        
        # Amount
        ttk.Label(main_frame, text="S·ªë ti·ªÅn *:").grid(row=row, column=0, sticky=tk.W, pady=5)
        amount_var = tk.StringVar(value=str(transaction_data.get('amount', '')))
        amount_entry = ttk.Entry(main_frame, textvariable=amount_var, width=30, font=('Arial', 12))
        amount_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Description
        ttk.Label(main_frame, text="M√¥ t·∫£ *:").grid(row=row, column=0, sticky=tk.W, pady=5)
        description_var = tk.StringVar(value=transaction_data.get('description', ''))
        description_entry = ttk.Entry(main_frame, textvariable=description_var, width=40)
        description_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Payment method
        ttk.Label(main_frame, text="H√¨nh th·ª©c:").grid(row=row, column=0, sticky=tk.W, pady=5)
        payment_method_var = tk.StringVar(value=transaction_data.get('payment_method', 'cash'))
        payment_method_combo = ttk.Combobox(main_frame, textvariable=payment_method_var, width=37,
                                           values=['cash', 'card', 'transfer', 'other'], state="readonly")
        payment_method_combo.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Date and time
        ttk.Label(main_frame, text="Ng√†y gi·ªù:").grid(row=row, column=0, sticky=tk.W, pady=5)
        datetime_var = tk.StringVar(value=transaction_data.get('transaction_date', datetime.now().strftime('%Y-%m-%d %H:%M')))
        datetime_entry = ttk.Entry(main_frame, textvariable=datetime_var, width=30)
        datetime_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Reference (optional)
        ttk.Label(main_frame, text="Tham chi·∫øu:").grid(row=row, column=0, sticky=tk.W, pady=5)
        reference_var = tk.StringVar(value=transaction_data.get('reference_type', ''))
        reference_entry = ttk.Entry(main_frame, textvariable=reference_var, width=40)
        reference_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Notes
        ttk.Label(main_frame, text="Ghi ch√∫:").grid(row=row, column=0, sticky=tk.NW, pady=5)
        notes_text = tk.Text(main_frame, width=40, height=6)
        notes_text.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Buttons
        btn_frame = ttk.Frame(main_frame)
        btn_frame.grid(row=row, column=0, columnspan=2, pady=20)
        
        def save_transaction():
            if not amount_var.get() or not description_var.get():
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn v√† m√¥ t·∫£!")
                return
            
            try:
                amount = float(amount_var.get())
                if amount <= 0:
                    messagebox.showerror("L·ªói", "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
                    return
                
                # Parse datetime
                try:
                    trans_datetime = datetime.strptime(datetime_var.get(), '%Y-%m-%d %H:%M')
                except:
                    trans_datetime = datetime.now()
                
                data = {
                    'transaction_type': transaction_type,
                    'amount': amount,
                    'description': description_var.get().strip(),
                    'payment_method': payment_method_var.get(),
                    'staff_id': self.current_user['id'],
                    'transaction_date': trans_datetime.isoformat(),
                    'created_at': datetime.now().isoformat()
                }
                
                if transaction_id:
                    # Update existing transaction
                    data['updated_at'] = datetime.now().isoformat()
                    set_clause = ', '.join([f"{key} = ?" for key in data.keys()])
                    query = f"UPDATE transactions SET {set_clause} WHERE id = ?"
                    params = list(data.values()) + [transaction_id]
                else:
                    # Insert new transaction
                    columns = ', '.join(data.keys())
                    placeholders = ', '.join(['?' for _ in data])
                    query = f"INSERT INTO transactions ({columns}) VALUES ({placeholders})"
                    params = list(data.values())
                
                self.db_manager.execute_query(query, params)
                
                messagebox.showinfo("Th√†nh c√¥ng", 
                                   "ƒê√£ c·∫≠p nh·∫≠t giao d·ªãch!" if transaction_id else "ƒê√£ th√™m giao d·ªãch!")
                dialog.destroy()
                self.refresh_transactions()
                self.refresh_dashboard()
                
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u giao d·ªãch: {e}")
        
        ttk.Button(btn_frame, text="üíæ L∆∞u", command=save_transaction).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="‚ùå H·ªßy", command=dialog.destroy).pack(side=tk.LEFT, padx=5)
        
        # Focus on amount entry
        amount_entry.focus_set()
    
    def edit_transaction(self):
        """Edit selected transaction"""
        selection = self.transactions_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn giao d·ªãch!")
            return
        
        item = self.transactions_tree.item(selection[0])
        transaction_id = item['values'][0]
        self.show_transaction_dialog(transaction_id)
    
    def delete_transaction(self):
        """Delete selected transaction"""
        selection = self.transactions_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn giao d·ªãch!")
            return
        
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a giao d·ªãch n√†y?"):
            item = self.transactions_tree.item(selection[0])
            transaction_id = item['values'][0]
            
            try:
                self.db_manager.execute_query("DELETE FROM transactions WHERE id = ?", (transaction_id,))
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a giao d·ªãch!")
                self.refresh_transactions()
                self.refresh_dashboard()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a giao d·ªãch: {e}")
    
    def refresh_debts(self):
        """Refresh debts data"""
        # Clear existing items
        for item in self.customer_debts_tree.get_children():
            self.customer_debts_tree.delete(item)
        
        for item in self.supplier_debts_tree.get_children():
            self.supplier_debts_tree.delete(item)
        
        # Load customer debts
        customer_debts = self.db_manager.fetch_all(
            """SELECT d.*, c.name as customer_name
               FROM debts d
               JOIN customers c ON d.debtor_id = c.id
               WHERE d.debtor_type = 'customer' AND d.status = 'outstanding'
               ORDER BY d.created_at DESC"""
        )
        
        for debt in customer_debts:
            # Calculate overdue days
            overdue_days = 0
            if debt['due_date']:
                try:
                    due_date = datetime.strptime(debt['due_date'], '%Y-%m-%d').date()
                    overdue_days = max(0, (date.today() - due_date).days)
                except:
                    pass
            
            self.customer_debts_tree.insert('', 'end', values=(
                debt['customer_name'],
                f"{debt['amount']:,.0f}",
                debt['description'] or '',
                debt['due_date'] or '',
                f"{overdue_days} ng√†y" if overdue_days > 0 else ""
            ))
        
        # Load supplier debts (would need suppliers table)
        # For now, showing placeholder
        pass
    
    def add_customer_debt(self):
        """Add customer debt"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng th√™m n·ª£ kh√°ch h√†ng s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def collect_customer_debt(self):
        """Collect customer debt"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng thu n·ª£ kh√°ch h√†ng s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def customer_debt_statement(self):
        """Generate customer debt statement"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng sao k√™ n·ª£ kh√°ch h√†ng s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def add_supplier_debt(self):
        """Add supplier debt"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng th√™m n·ª£ nh√† cung c·∫•p s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def pay_supplier_debt(self):
        """Pay supplier debt"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng tr·∫£ n·ª£ nh√† cung c·∫•p s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def supplier_debt_statement(self):
        """Generate supplier debt statement"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng sao k√™ n·ª£ nh√† cung c·∫•p s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def refresh_cash_sources(self):
        """Refresh cash sources"""
        # Clear existing items
        for item in self.cash_sources_tree.get_children():
            self.cash_sources_tree.delete(item)
        
        # Default cash sources
        default_sources = [
            ("Ti·ªÅn m·∫∑t", 0, "Ch∆∞a c·∫≠p nh·∫≠t"),
            ("Ng√¢n h√†ng Vietcombank", 0, "Ch∆∞a c·∫≠p nh·∫≠t"),
            ("Ng√¢n h√†ng Techcombank", 0, "Ch∆∞a c·∫≠p nh·∫≠t")
        ]
        
        for source, amount, updated in default_sources:
            self.cash_sources_tree.insert('', 'end', values=(
                source,
                f"{amount:,.0f} VNƒê",
                updated
            ))
    
    def add_cash_source(self):
        """Add cash source"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng th√™m ngu·ªìn ti·ªÅn s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def edit_cash_source(self):
        """Edit cash source"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng s·ª≠a ngu·ªìn ti·ªÅn s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def adjust_cash_source(self):
        """Adjust cash source amount"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëi·ªÅu ch·ªânh ngu·ªìn ti·ªÅn s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def view_daily_cash_flow(self):
        """View daily cash flow"""
        selected_date = self.cash_flow_date_var.get()
        
        if not selected_date:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ng√†y!")
            return
        
        # Clear cash flow text
        self.cash_flow_text.delete('1.0', tk.END)
        
        # Generate cash flow report
        cash_flow_report = f"""
=== B√ÅO C√ÅO D√íNG TI·ªÄN NG√ÄY {selected_date} ===
Th·ªùi gian t·∫°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

1. S·ªê D∆Ø ƒê·∫¶U NG√ÄY:
   - Ti·ªÅn m·∫∑t: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - Ng√¢n h√†ng: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - T·ªïng c·ªông: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]

2. D√íNG TI·ªÄN V√ÄO:
   - B√°n h√†ng: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - Thu n·ª£: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - Thu kh√°c: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - T·ªïng thu: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]

3. D√íNG TI·ªÄN RA:
   - Nh·∫≠p h√†ng: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - Chi ph√≠ ho·∫°t ƒë·ªông: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - Tr·∫£ n·ª£: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - Chi kh√°c: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - T·ªïng chi: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]

4. S·ªê D∆Ø CU·ªêI NG√ÄY:
   - Ti·ªÅn m·∫∑t: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - Ng√¢n h√†ng: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
   - T·ªïng c·ªông: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]

5. D√íNG TI·ªÄN R√íNG: [S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n]
        """
        
        self.cash_flow_text.insert('1.0', cash_flow_report.strip())
    
    def generate_cash_flow_report(self):
        """Generate detailed cash flow report"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng b√°o c√°o d√≤ng ti·ªÅn chi ti·∫øt s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")


