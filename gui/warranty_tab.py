#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Warranty management tab for ChViet Mobile Store Management System
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, date, timedelta
import uuid

from models import Warranty, Customer
from utils.qr_utils import generate_qr_code
from config import BUSINESS_RULES

class WarrantyTab:
    def __init__(self, parent, db_manager, current_user):
        self.parent = parent
        self.db_manager = db_manager
        self.current_user = current_user
        
        self.frame = ttk.Frame(parent)
        self.setup_ui()
        self.load_data()
    
    def setup_ui(self):
        """Setup warranty tab UI"""
        # Main container
        main_container = ttk.Frame(self.frame)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create notebook for sub-tabs
        self.notebook = ttk.Notebook(main_container)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Warranty List tab
        self.setup_warranty_list_tab()
        
        # Warranty Lookup tab
        self.setup_warranty_lookup_tab()
        
        # Warranty Claims tab
        self.setup_warranty_claims_tab()
        
        # Expired Warranties tab
        self.setup_expired_warranties_tab()
    
    def setup_warranty_list_tab(self):
        """Setup warranty list tab"""
        warranty_list_frame = ttk.Frame(self.notebook)
        self.notebook.add(warranty_list_frame, text="Danh S√°ch B·∫£o H√†nh")
        
        # Top controls
        top_frame = ttk.Frame(warranty_list_frame)
        top_frame.pack(fill=tk.X, pady=(10, 10), padx=10)
        
        # Search frame
        search_frame = ttk.LabelFrame(top_frame, text="T√¨m ki·∫øm b·∫£o h√†nh", padding=10)
        search_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        ttk.Label(search_frame, text="IMEI / S·ªë b·∫£o h√†nh / Kh√°ch h√†ng:").pack(anchor=tk.W)
        self.warranty_search_var = tk.StringVar()
        self.warranty_search_var.trace('w', self.on_warranty_search)
        search_entry = ttk.Entry(search_frame, textvariable=self.warranty_search_var, width=40)
        search_entry.pack(pady=5, fill=tk.X)
        
        # Status filter
        status_frame = ttk.LabelFrame(top_frame, text="L·ªçc tr·∫°ng th√°i", padding=10)
        status_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        self.status_filter_var = tk.StringVar(value="all")
        status_values = [
            ("all", "T·∫•t c·∫£"),
            ("active", "ƒêang b·∫£o h√†nh"),
            ("expired", "H·∫øt h·∫°n"),
            ("claimed", "ƒê√£ b·∫£o h√†nh"),
            ("voided", "H·ªßy b·ªè")
        ]
        
        for value, text in status_values:
            ttk.Radiobutton(status_frame, text=text, variable=self.status_filter_var,
                           value=value, command=self.filter_warranties).pack(anchor=tk.W)
        
        # Control buttons
        btn_frame = ttk.Frame(top_frame)
        btn_frame.pack(side=tk.RIGHT)
        
        ttk.Button(btn_frame, text="‚ûï T·∫°o b·∫£o h√†nh", 
                  command=self.create_warranty).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="üëÅÔ∏è Xem chi ti·∫øt", 
                  command=self.view_warranty_details).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="üñ®Ô∏è In phi·∫øu BH", 
                  command=self.print_warranty_card).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="üìã C·∫≠p nh·∫≠t tr·∫°ng th√°i", 
                  command=self.update_warranty_status).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="üîÑ L√†m m·ªõi", 
                  command=self.refresh_warranties).pack(pady=2, fill=tk.X)
        
        # Warranties treeview
        tree_frame = ttk.Frame(warranty_list_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL)
        h_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.HORIZONTAL)
        
        self.warranties_tree = ttk.Treeview(tree_frame,
                                           columns=('id', 'warranty_number', 'imei', 'customer', 'product',
                                                  'start_date', 'end_date', 'status', 'type', 'remaining_days'),
                                           show='headings',
                                           yscrollcommand=v_scrollbar.set,
                                           xscrollcommand=h_scrollbar.set)
        
        # Configure scrollbars
        v_scrollbar.config(command=self.warranties_tree.yview)
        h_scrollbar.config(command=self.warranties_tree.xview)
        
        # Column headings
        columns = {
            'id': ('ID', 50),
            'warranty_number': ('S·ªë b·∫£o h√†nh', 120),
            'imei': ('IMEI', 150),
            'customer': ('Kh√°ch h√†ng', 150),
            'product': ('S·∫£n ph·∫©m', 200),
            'start_date': ('Ng√†y b·∫Øt ƒë·∫ßu', 100),
            'end_date': ('Ng√†y h·∫øt h·∫°n', 100),
            'status': ('Tr·∫°ng th√°i', 100),
            'type': ('Lo·∫°i BH', 100),
            'remaining_days': ('C√≤n l·∫°i (ng√†y)', 100)
        }
        
        for col, (heading, width) in columns.items():
            self.warranties_tree.heading(col, text=heading)
            self.warranties_tree.column(col, width=width, minwidth=50)
        
        # Pack treeview and scrollbars
        self.warranties_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Bind double-click
        self.warranties_tree.bind('<Double-1>', lambda e: self.view_warranty_details())
    
    def setup_warranty_lookup_tab(self):
        """Setup warranty lookup tab"""
        lookup_frame = ttk.Frame(self.notebook)
        self.notebook.add(lookup_frame, text="Tra C·ª©u B·∫£o H√†nh")
        
        # Search section
        search_section = ttk.LabelFrame(lookup_frame, text="Tra c·ª©u b·∫£o h√†nh", padding=20)
        search_section.pack(fill=tk.X, padx=20, pady=20)
        
        # IMEI/QR Code lookup
        ttk.Label(search_section, text="Qu√©t QR Code ho·∫∑c nh·∫≠p IMEI / S·ªë b·∫£o h√†nh:", 
                 style="Heading.TLabel").pack(anchor=tk.W, pady=(0, 10))
        
        lookup_frame_inner = ttk.Frame(search_section)
        lookup_frame_inner.pack(fill=tk.X)
        
        self.lookup_var = tk.StringVar()
        lookup_entry = ttk.Entry(lookup_frame_inner, textvariable=self.lookup_var, width=30, font=('Arial', 14))
        lookup_entry.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(lookup_frame_inner, text="üîç Tra c·ª©u", 
                  command=self.lookup_warranty).pack(side=tk.LEFT, padx=5)
        ttk.Button(lookup_frame_inner, text="üì∑ Qu√©t QR", 
                  command=self.scan_warranty_qr).pack(side=tk.LEFT, padx=5)
        
        # Results section
        self.warranty_results_frame = ttk.LabelFrame(lookup_frame, text="K·∫øt qu·∫£ tra c·ª©u", padding=20)
        self.warranty_results_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        # Initially hide results
        self.warranty_results_frame.pack_forget()
        
        # Focus on lookup entry
        lookup_entry.focus_set()
    
    def setup_warranty_claims_tab(self):
        """Setup warranty claims tab"""
        claims_frame = ttk.Frame(self.notebook)
        self.notebook.add(claims_frame, text="Y√™u C·∫ßu B·∫£o H√†nh")
        
        # Top controls
        top_frame = ttk.Frame(claims_frame)
        top_frame.pack(fill=tk.X, pady=(10, 10), padx=10)
        
        ttk.Button(top_frame, text="‚ûï T·∫°o y√™u c·∫ßu BH", 
                  command=self.create_warranty_claim).pack(side=tk.LEFT, padx=5)
        ttk.Button(top_frame, text="‚úèÔ∏è X·ª≠ l√Ω y√™u c·∫ßu", 
                  command=self.process_warranty_claim).pack(side=tk.LEFT, padx=5)
        ttk.Button(top_frame, text="üëÅÔ∏è Xem chi ti·∫øt", 
                  command=self.view_claim_details).pack(side=tk.LEFT, padx=5)
        
        # Claims treeview
        tree_frame = ttk.Frame(claims_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        self.claims_tree = ttk.Treeview(tree_frame,
                                       columns=('id', 'claim_date', 'warranty_number', 'imei', 
                                              'customer', 'issue', 'status', 'resolution'),
                                       show='headings')
        
        # Column headings
        columns = {
            'id': ('ID', 50),
            'claim_date': ('Ng√†y y√™u c·∫ßu', 120),
            'warranty_number': ('S·ªë b·∫£o h√†nh', 120),
            'imei': ('IMEI', 150),
            'customer': ('Kh√°ch h√†ng', 150),
            'issue': ('V·∫•n ƒë·ªÅ', 200),
            'status': ('Tr·∫°ng th√°i', 100),
            'resolution': ('Gi·∫£i quy·∫øt', 150)
        }
        
        for col, (heading, width) in columns.items():
            self.claims_tree.heading(col, text=heading)
            self.claims_tree.column(col, width=width, minwidth=50)
        
        self.claims_tree.pack(fill=tk.BOTH, expand=True)
    
    def setup_expired_warranties_tab(self):
        """Setup expired warranties tab"""
        expired_frame = ttk.Frame(self.notebook)
        self.notebook.add(expired_frame, text="BH H·∫øt H·∫°n")
        
        # Info frame
        info_frame = ttk.LabelFrame(expired_frame, text="B·∫£o h√†nh s·∫Øp h·∫øt h·∫°n / ƒë√£ h·∫øt h·∫°n", padding=10)
        info_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(info_frame, text="Danh s√°ch c√°c s·∫£n ph·∫©m b·∫£o h√†nh s·∫Øp h·∫øt h·∫°n trong 30 ng√†y t·ªõi ho·∫∑c ƒë√£ h·∫øt h·∫°n.", 
                 font=('Arial', 10)).pack(anchor=tk.W)
        
        # Filter frame
        filter_frame = ttk.Frame(info_frame)
        filter_frame.pack(fill=tk.X, pady=10)
        
        self.expiry_filter_var = tk.StringVar(value="expiring")
        ttk.Radiobutton(filter_frame, text="S·∫Øp h·∫øt h·∫°n (30 ng√†y)", 
                       variable=self.expiry_filter_var, value="expiring",
                       command=self.filter_expired_warranties).pack(side=tk.LEFT, padx=10)
        ttk.Radiobutton(filter_frame, text="ƒê√£ h·∫øt h·∫°n", 
                       variable=self.expiry_filter_var, value="expired",
                       command=self.filter_expired_warranties).pack(side=tk.LEFT, padx=10)
        
        # Expired warranties treeview
        tree_frame = ttk.Frame(expired_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        self.expired_tree = ttk.Treeview(tree_frame,
                                        columns=('warranty_number', 'imei', 'customer', 'product',
                                               'end_date', 'days_remaining', 'contact'),
                                        show='headings')
        
        # Column headings
        columns = {
            'warranty_number': ('S·ªë b·∫£o h√†nh', 120),
            'imei': ('IMEI', 150),
            'customer': ('Kh√°ch h√†ng', 150),
            'product': ('S·∫£n ph·∫©m', 200),
            'end_date': ('H·∫øt h·∫°n', 100),
            'days_remaining': ('C√≤n l·∫°i', 80),
            'contact': ('Li√™n h·ªá', 120)
        }
        
        for col, (heading, width) in columns.items():
            self.expired_tree.heading(col, text=heading)
            self.expired_tree.column(col, width=width, minwidth=50)
        
        self.expired_tree.pack(fill=tk.BOTH, expand=True)
        
        # Load expired warranties
        self.filter_expired_warranties()
    
    def load_data(self):
        """Load all data"""
        self.refresh_warranties()
        self.load_warranty_claims()
    
    def refresh_warranties(self):
        """Refresh warranties list"""
        # Clear existing items
        for item in self.warranties_tree.get_children():
            self.warranties_tree.delete(item)
        
        # Load warranties
        query = """
        SELECT w.*, c.name as customer_name, p.name as product_name
        FROM warranties w
        LEFT JOIN customers c ON w.customer_id = c.id
        LEFT JOIN products p ON w.product_id = p.id
        ORDER BY w.created_at DESC
        """
        
        warranties = self.db_manager.fetch_all(query)
        
        for warranty in warranties:
            # Calculate remaining days
            try:
                end_date = datetime.strptime(warranty['end_date'], '%Y-%m-%d').date()
                remaining_days = (end_date - date.today()).days
                remaining_text = f"{remaining_days} ng√†y" if remaining_days > 0 else "H·∫øt h·∫°n"
            except:
                remaining_text = "N/A"
            
            # Status translation
            status_map = {
                'active': 'ƒêang b·∫£o h√†nh',
                'expired': 'H·∫øt h·∫°n',
                'claimed': 'ƒê√£ b·∫£o h√†nh',
                'voided': 'H·ªßy b·ªè'
            }
            
            status_text = status_map.get(warranty['status'], warranty['status'])
            
            # Type translation
            type_map = {
                'product': 'S·∫£n ph·∫©m',
                'repair': 'Sau s·ª≠a ch·ªØa'
            }
            
            type_text = type_map.get(warranty['warranty_type'], warranty['warranty_type'])
            
            self.warranties_tree.insert('', 'end', values=(
                warranty['id'],
                warranty['warranty_number'],
                warranty['imei'] or '',
                warranty['customer_name'] or '',
                warranty['product_name'] or '',
                warranty['start_date'],
                warranty['end_date'],
                status_text,
                type_text,
                remaining_text
            ))
    
    def on_warranty_search(self, *args):
        """Handle warranty search"""
        search_term = self.warranty_search_var.get().lower()
        
        if not search_term:
            self.refresh_warranties()
            return
        
        # Clear existing items
        for item in self.warranties_tree.get_children():
            self.warranties_tree.delete(item)
        
        # Search warranties
        query = """
        SELECT w.*, c.name as customer_name, p.name as product_name
        FROM warranties w
        LEFT JOIN customers c ON w.customer_id = c.id
        LEFT JOIN products p ON w.product_id = p.id
        WHERE LOWER(w.warranty_number) LIKE ? OR
              LOWER(w.imei) LIKE ? OR
              LOWER(c.name) LIKE ?
        ORDER BY w.created_at DESC
        """
        
        search_pattern = f"%{search_term}%"
        warranties = self.db_manager.fetch_all(query, (search_pattern, search_pattern, search_pattern))
        
        for warranty in warranties:
            # Calculate remaining days
            try:
                end_date = datetime.strptime(warranty['end_date'], '%Y-%m-%d').date()
                remaining_days = (end_date - date.today()).days
                remaining_text = f"{remaining_days} ng√†y" if remaining_days > 0 else "H·∫øt h·∫°n"
            except:
                remaining_text = "N/A"
            
            status_map = {
                'active': 'ƒêang b·∫£o h√†nh',
                'expired': 'H·∫øt h·∫°n',
                'claimed': 'ƒê√£ b·∫£o h√†nh',
                'voided': 'H·ªßy b·ªè'
            }
            
            status_text = status_map.get(warranty['status'], warranty['status'])
            
            type_map = {
                'product': 'S·∫£n ph·∫©m',
                'repair': 'Sau s·ª≠a ch·ªØa'
            }
            
            type_text = type_map.get(warranty['warranty_type'], warranty['warranty_type'])
            
            self.warranties_tree.insert('', 'end', values=(
                warranty['id'],
                warranty['warranty_number'],
                warranty['imei'] or '',
                warranty['customer_name'] or '',
                warranty['product_name'] or '',
                warranty['start_date'],
                warranty['end_date'],
                status_text,
                type_text,
                remaining_text
            ))
    
    def filter_warranties(self):
        """Filter warranties by status"""
        status_filter = self.status_filter_var.get()
        
        # Clear existing items
        for item in self.warranties_tree.get_children():
            self.warranties_tree.delete(item)
        
        # Build query based on filter
        if status_filter == "all":
            query = """
            SELECT w.*, c.name as customer_name, p.name as product_name
            FROM warranties w
            LEFT JOIN customers c ON w.customer_id = c.id
            LEFT JOIN products p ON w.product_id = p.id
            ORDER BY w.created_at DESC
            """
            params = ()
        else:
            # Handle special cases
            if status_filter == "active":
                query = """
                SELECT w.*, c.name as customer_name, p.name as product_name
                FROM warranties w
                LEFT JOIN customers c ON w.customer_id = c.id
                LEFT JOIN products p ON w.product_id = p.id
                WHERE w.status = 'active' AND DATE(w.end_date) >= DATE('now')
                ORDER BY w.created_at DESC
                """
                params = ()
            elif status_filter == "expired":
                query = """
                SELECT w.*, c.name as customer_name, p.name as product_name
                FROM warranties w
                LEFT JOIN customers c ON w.customer_id = c.id
                LEFT JOIN products p ON w.product_id = p.id
                WHERE DATE(w.end_date) < DATE('now')
                ORDER BY w.created_at DESC
                """
                params = ()
            else:
                query = """
                SELECT w.*, c.name as customer_name, p.name as product_name
                FROM warranties w
                LEFT JOIN customers c ON w.customer_id = c.id
                LEFT JOIN products p ON w.product_id = p.id
                WHERE w.status = ?
                ORDER BY w.created_at DESC
                """
                params = (status_filter,)
        
        warranties = self.db_manager.fetch_all(query, params)
        
        for warranty in warranties:
            # Calculate remaining days
            try:
                end_date = datetime.strptime(warranty['end_date'], '%Y-%m-%d').date()
                remaining_days = (end_date - date.today()).days
                remaining_text = f"{remaining_days} ng√†y" if remaining_days > 0 else "H·∫øt h·∫°n"
            except:
                remaining_text = "N/A"
            
            status_map = {
                'active': 'ƒêang b·∫£o h√†nh',
                'expired': 'H·∫øt h·∫°n',
                'claimed': 'ƒê√£ b·∫£o h√†nh',
                'voided': 'H·ªßy b·ªè'
            }
            
            status_text = status_map.get(warranty['status'], warranty['status'])
            
            type_map = {
                'product': 'S·∫£n ph·∫©m',
                'repair': 'Sau s·ª≠a ch·ªØa'
            }
            
            type_text = type_map.get(warranty['warranty_type'], warranty['warranty_type'])
            
            self.warranties_tree.insert('', 'end', values=(
                warranty['id'],
                warranty['warranty_number'],
                warranty['imei'] or '',
                warranty['customer_name'] or '',
                warranty['product_name'] or '',
                warranty['start_date'],
                warranty['end_date'],
                status_text,
                type_text,
                remaining_text
            ))
    
    def create_warranty(self):
        """Create new warranty"""
        self.show_warranty_dialog()
    
    def show_warranty_dialog(self, warranty_id=None):
        """Show add/edit warranty dialog"""
        dialog = tk.Toplevel(self.frame)
        dialog.title("T·∫°o b·∫£o h√†nh" if warranty_id is None else "S·ª≠a b·∫£o h√†nh")
        dialog.geometry("600x500")
        dialog.transient(self.frame)
        dialog.grab_set()
        
        # Load existing warranty data if editing
        warranty_data = {}
        if warranty_id:
            warranty = self.db_manager.fetch_one("SELECT * FROM warranties WHERE id = ?", (warranty_id,))
            if warranty:
                warranty_data = dict(warranty)
        
        # Main frame
        main_frame = ttk.Frame(dialog, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        row = 0
        
        # Warranty number
        ttk.Label(main_frame, text="S·ªë b·∫£o h√†nh:").grid(row=row, column=0, sticky=tk.W, pady=5)
        warranty_number_var = tk.StringVar(value=warranty_data.get('warranty_number', ''))
        warranty_number_entry = ttk.Entry(main_frame, textvariable=warranty_number_var, width=30, state="readonly")
        warranty_number_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        
        ttk.Button(main_frame, text="T·∫°o m√£", 
                  command=lambda: warranty_number_var.set(f"BH{datetime.now().strftime('%Y%m%d%H%M%S')}")
                  ).grid(row=row, column=2, pady=5, padx=(5, 0))
        row += 1
        
        # Customer
        ttk.Label(main_frame, text="Kh√°ch h√†ng *:").grid(row=row, column=0, sticky=tk.W, pady=5)
        customer_var = tk.StringVar()
        customer_combo = ttk.Combobox(main_frame, textvariable=customer_var, width=40)
        
        # Load customers
        customers = self.db_manager.fetch_all("SELECT id, name, phone FROM customers ORDER BY name")
        customer_combo['values'] = [f"{c['id']} - {c['name']} ({c['phone']})" for c in customers if c['phone']]
        
        if warranty_data.get('customer_id'):
            for i, customer in enumerate(customers):
                if customer['id'] == warranty_data['customer_id']:
                    customer_combo.current(i)
                    break
        
        customer_combo.grid(row=row, column=1, columnspan=2, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Product
        ttk.Label(main_frame, text="S·∫£n ph·∫©m:").grid(row=row, column=0, sticky=tk.W, pady=5)
        product_var = tk.StringVar()
        product_combo = ttk.Combobox(main_frame, textvariable=product_var, width=40)
        
        # Load products
        products = self.db_manager.fetch_all("SELECT id, name, brand FROM products WHERE is_active = 1 ORDER BY name")
        product_combo['values'] = [f"{p['id']} - {p['name']} ({p['brand']})" for p in products]
        
        if warranty_data.get('product_id'):
            for i, product in enumerate(products):
                if product['id'] == warranty_data['product_id']:
                    product_combo.current(i)
                    break
        
        product_combo.grid(row=row, column=1, columnspan=2, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # IMEI
        ttk.Label(main_frame, text="IMEI *:").grid(row=row, column=0, sticky=tk.W, pady=5)
        imei_var = tk.StringVar(value=warranty_data.get('imei', ''))
        imei_entry = ttk.Entry(main_frame, textvariable=imei_var, width=40)
        imei_entry.grid(row=row, column=1, columnspan=2, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Warranty type
        ttk.Label(main_frame, text="Lo·∫°i b·∫£o h√†nh:").grid(row=row, column=0, sticky=tk.W, pady=5)
        warranty_type_var = tk.StringVar(value=warranty_data.get('warranty_type', 'product'))
        warranty_type_combo = ttk.Combobox(main_frame, textvariable=warranty_type_var, width=37,
                                          values=['product', 'repair'], state="readonly")
        warranty_type_combo.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Start date
        ttk.Label(main_frame, text="Ng√†y b·∫Øt ƒë·∫ßu *:").grid(row=row, column=0, sticky=tk.W, pady=5)
        start_date_var = tk.StringVar(value=warranty_data.get('start_date', date.today().strftime('%Y-%m-%d')))
        start_date_entry = ttk.Entry(main_frame, textvariable=start_date_var, width=20)
        start_date_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        
        ttk.Button(main_frame, text="H√¥m nay", 
                  command=lambda: start_date_var.set(date.today().strftime('%Y-%m-%d'))
                  ).grid(row=row, column=2, pady=5, padx=(5, 0))
        row += 1
        
        # End date
        ttk.Label(main_frame, text="Ng√†y h·∫øt h·∫°n *:").grid(row=row, column=0, sticky=tk.W, pady=5)
        end_date_var = tk.StringVar(value=warranty_data.get('end_date', ''))
        end_date_entry = ttk.Entry(main_frame, textvariable=end_date_var, width=20)
        end_date_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        
        def calculate_end_date():
            try:
                start = datetime.strptime(start_date_var.get(), '%Y-%m-%d').date()
                end = start + timedelta(days=365)  # 1 year default
                end_date_var.set(end.strftime('%Y-%m-%d'))
            except:
                pass
        
        ttk.Button(main_frame, text="T√≠nh t·ª± ƒë·ªông", 
                  command=calculate_end_date).grid(row=row, column=2, pady=5, padx=(5, 0))
        row += 1
        
        # Status
        ttk.Label(main_frame, text="Tr·∫°ng th√°i:").grid(row=row, column=0, sticky=tk.W, pady=5)
        status_var = tk.StringVar(value=warranty_data.get('status', 'active'))
        status_combo = ttk.Combobox(main_frame, textvariable=status_var, width=37,
                                   values=['active', 'expired', 'claimed', 'voided'], state="readonly")
        status_combo.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Notes
        ttk.Label(main_frame, text="Ghi ch√∫:").grid(row=row, column=0, sticky=tk.NW, pady=5)
        notes_text = tk.Text(main_frame, width=40, height=4)
        notes_text.grid(row=row, column=1, columnspan=2, sticky=tk.W, pady=5, padx=(10, 0))
        if warranty_data.get('notes'):
            notes_text.insert('1.0', warranty_data['notes'])
        row += 1
        
        # Generate initial warranty number if creating new
        if not warranty_id and not warranty_number_var.get():
            warranty_number_var.set(f"BH{datetime.now().strftime('%Y%m%d%H%M%S')}")
        
        # Buttons
        btn_frame = ttk.Frame(main_frame)
        btn_frame.grid(row=row, column=0, columnspan=3, pady=20)
        
        def save_warranty():
            if not warranty_number_var.get().strip():
                messagebox.showerror("L·ªói", "Vui l√≤ng t·∫°o s·ªë b·∫£o h√†nh!")
                return
            
            if not customer_var.get():
                messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn kh√°ch h√†ng!")
                return
            
            if not imei_var.get().strip():
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p IMEI!")
                return
            
            if not start_date_var.get() or not end_date_var.get():
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ng√†y b·∫£o h√†nh!")
                return
            
            try:
                # Get customer ID
                customer_id = int(customer_var.get().split(' - ')[0])
                
                # Get product ID
                product_id = None
                if product_var.get():
                    product_id = int(product_var.get().split(' - ')[0])
                
                # Generate QR code
                qr_code = generate_qr_code(f"WARRANTY:{warranty_number_var.get()}")
                
                # Prepare warranty data
                data = {
                    'warranty_number': warranty_number_var.get().strip(),
                    'imei': imei_var.get().strip(),
                    'product_id': product_id,
                    'customer_id': customer_id,
                    'warranty_type': warranty_type_var.get(),
                    'start_date': start_date_var.get(),
                    'end_date': end_date_var.get(),
                    'status': status_var.get(),
                    'qr_code': qr_code,
                    'notes': notes_text.get('1.0', tk.END).strip(),
                    'updated_at': datetime.now().isoformat()
                }
                
                if warranty_id:
                    # Update existing warranty
                    set_clause = ', '.join([f"{key} = ?" for key in data.keys()])
                    query = f"UPDATE warranties SET {set_clause} WHERE id = ?"
                    params = list(data.values()) + [warranty_id]
                else:
                    # Insert new warranty
                    data['created_at'] = datetime.now().isoformat()
                    columns = ', '.join(data.keys())
                    placeholders = ', '.join(['?' for _ in data])
                    query = f"INSERT INTO warranties ({columns}) VALUES ({placeholders})"
                    params = list(data.values())
                
                self.db_manager.execute_query(query, params)
                
                messagebox.showinfo("Th√†nh c√¥ng", 
                                   "ƒê√£ c·∫≠p nh·∫≠t b·∫£o h√†nh!" if warranty_id else "ƒê√£ t·∫°o b·∫£o h√†nh!")
                dialog.destroy()
                self.refresh_warranties()
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u b·∫£o h√†nh: {e}")
        
        ttk.Button(btn_frame, text="üíæ L∆∞u", command=save_warranty).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="‚ùå H·ªßy", command=dialog.destroy).pack(side=tk.LEFT, padx=5)
    
    def view_warranty_details(self):
        """View warranty details"""
        selection = self.warranties_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn b·∫£o h√†nh!")
            return
        
        item = self.warranties_tree.item(selection[0])
        warranty_id = item['values'][0]
        self.show_warranty_details_dialog(warranty_id)
    
    def show_warranty_details_dialog(self, warranty_id):
        """Show warranty details dialog"""
        dialog = tk.Toplevel(self.frame)
        dialog.title("Chi ti·∫øt b·∫£o h√†nh")
        dialog.geometry("700x600")
        dialog.transient(self.frame)
        
        # Load warranty data
        warranty = self.db_manager.fetch_one(
            """SELECT w.*, c.name as customer_name, c.phone as customer_phone,
                      c.address as customer_address, p.name as product_name, p.brand
               FROM warranties w
               LEFT JOIN customers c ON w.customer_id = c.id
               LEFT JOIN products p ON w.product_id = p.id
               WHERE w.id = ?""",
            (warranty_id,)
        )
        
        if not warranty:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y b·∫£o h√†nh!")
            dialog.destroy()
            return
        
        main_frame = ttk.Frame(dialog, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Warranty information
        info_frame = ttk.LabelFrame(main_frame, text="Th√¥ng tin b·∫£o h√†nh", padding=10)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Calculate warranty status
        try:
            end_date = datetime.strptime(warranty['end_date'], '%Y-%m-%d').date()
            remaining_days = (end_date - date.today()).days
            if remaining_days > 0:
                warranty_status = f"C√≤n {remaining_days} ng√†y"
                status_color = "green" if remaining_days > 30 else "orange"
            else:
                warranty_status = "ƒê√£ h·∫øt h·∫°n"
                status_color = "red"
        except:
            warranty_status = "N/A"
            status_color = "black"
        
        info_data = [
            ("S·ªë b·∫£o h√†nh:", warranty['warranty_number']),
            ("IMEI:", warranty['imei'] or ''),
            ("S·∫£n ph·∫©m:", f"{warranty['product_name']} ({warranty['brand']})" if warranty['product_name'] else ''),
            ("Lo·∫°i b·∫£o h√†nh:", "S·∫£n ph·∫©m" if warranty['warranty_type'] == 'product' else "Sau s·ª≠a ch·ªØa"),
            ("Ng√†y b·∫Øt ƒë·∫ßu:", warranty['start_date']),
            ("Ng√†y h·∫øt h·∫°n:", warranty['end_date']),
            ("T√¨nh tr·∫°ng:", warranty_status),
            ("Tr·∫°ng th√°i:", warranty['status'])
        ]
        
        for i, (label, value) in enumerate(info_data):
            row, col = divmod(i, 2)
            ttk.Label(info_frame, text=label).grid(row=row, column=col*2, sticky=tk.W, padx=5, pady=2)
            label_widget = ttk.Label(info_frame, text=str(value), font=('Arial', 10, 'bold'))
            if label == "T√¨nh tr·∫°ng:":
                label_widget.config(foreground=status_color)
            label_widget.grid(row=row, column=col*2+1, sticky=tk.W, padx=5, pady=2)
        
        # Customer information
        customer_info_frame = ttk.LabelFrame(main_frame, text="Th√¥ng tin kh√°ch h√†ng", padding=10)
        customer_info_frame.pack(fill=tk.X, pady=(0, 10))
        
        customer_data = [
            ("T√™n kh√°ch h√†ng:", warranty['customer_name'] or ''),
            ("S·ªë ƒëi·ªán tho·∫°i:", warranty['customer_phone'] or ''),
            ("ƒê·ªãa ch·ªâ:", warranty['customer_address'] or '')
        ]
        
        for i, (label, value) in enumerate(customer_data):
            ttk.Label(customer_info_frame, text=label).grid(row=i, column=0, sticky=tk.W, padx=5, pady=2)
            ttk.Label(customer_info_frame, text=str(value), font=('Arial', 10, 'bold')).grid(
                row=i, column=1, sticky=tk.W, padx=5, pady=2)
        
        # QR Code section
        if warranty['qr_code']:
            qr_frame = ttk.LabelFrame(main_frame, text="QR Code tra c·ª©u", padding=10)
            qr_frame.pack(fill=tk.X, pady=(0, 10))
            
            ttk.Label(qr_frame, text=f"M√£ QR tra c·ª©u: {warranty['warranty_number']}", 
                     font=('Arial', 12, 'bold')).pack(anchor=tk.W)
        
        # Notes
        if warranty['notes']:
            notes_frame = ttk.LabelFrame(main_frame, text="Ghi ch√∫", padding=10)
            notes_frame.pack(fill=tk.X, pady=(0, 10))
            
            notes_text = tk.Text(notes_frame, width=60, height=4, wrap=tk.WORD, state=tk.DISABLED)
            notes_text.insert('1.0', warranty['notes'])
            notes_text.pack(fill=tk.X)
        
        # Buttons
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(btn_frame, text="üñ®Ô∏è In phi·∫øu BH", 
                  command=lambda: self.print_warranty_card_by_id(warranty_id)).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="‚úèÔ∏è S·ª≠a", 
                  command=lambda: [dialog.destroy(), self.show_warranty_dialog(warranty_id)]).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="ƒê√≥ng", 
                  command=dialog.destroy).pack(side=tk.RIGHT, padx=5)
    
    def print_warranty_card(self):
        """Print warranty card for selected warranty"""
        selection = self.warranties_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn b·∫£o h√†nh!")
            return
        
        item = self.warranties_tree.item(selection[0])
        warranty_id = item['values'][0]
        self.print_warranty_card_by_id(warranty_id)
    
    def print_warranty_card_by_id(self, warranty_id):
        """Print warranty card by ID"""
        try:
            from utils.print_utils import print_warranty_card
            print_warranty_card(self.db_manager, warranty_id)
        except Exception as e:
            messagebox.showerror("L·ªói in", f"Kh√¥ng th·ªÉ in phi·∫øu b·∫£o h√†nh: {e}")
    
    def update_warranty_status(self):
        """Update warranty status"""
        selection = self.warranties_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn b·∫£o h√†nh!")
            return
        
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng c·∫≠p nh·∫≠t tr·∫°ng th√°i b·∫£o h√†nh s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def lookup_warranty(self):
        """Lookup warranty by IMEI/QR code"""
        lookup_value = self.lookup_var.get().strip()
        if not lookup_value:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p IMEI ho·∫∑c s·ªë b·∫£o h√†nh!")
            return
        
        # Extract warranty number from QR code if necessary
        warranty_identifier = lookup_value
        if lookup_value.startswith("WARRANTY:"):
            warranty_identifier = lookup_value.replace("WARRANTY:", "")
        
        # Find warranty
        warranty = self.db_manager.fetch_one(
            """SELECT w.*, c.name as customer_name, c.phone as customer_phone,
                      p.name as product_name, p.brand
               FROM warranties w
               LEFT JOIN customers c ON w.customer_id = c.id
               LEFT JOIN products p ON w.product_id = p.id
               WHERE w.warranty_number = ? OR w.imei = ?""",
            (warranty_identifier, warranty_identifier)
        )
        
        if not warranty:
            # Hide results frame
            self.warranty_results_frame.pack_forget()
            messagebox.showwarning("Kh√¥ng t√¨m th·∫•y", f"Kh√¥ng t√¨m th·∫•y b·∫£o h√†nh v·ªõi m√£: {warranty_identifier}")
            return
        
        # Show results
        self.show_warranty_lookup_results(warranty)
    
    def show_warranty_lookup_results(self, warranty):
        """Show warranty lookup results"""
        # Clear existing results
        for widget in self.warranty_results_frame.winfo_children():
            widget.destroy()
        
        # Show results frame
        self.warranty_results_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        # Title
        ttk.Label(self.warranty_results_frame, text=f"Th√¥ng tin b·∫£o h√†nh - {warranty['warranty_number']}", 
                 style="Heading.TLabel").pack(anchor=tk.W, pady=(0, 15))
        
        # Calculate warranty status
        try:
            end_date = datetime.strptime(warranty['end_date'], '%Y-%m-%d').date()
            remaining_days = (end_date - date.today()).days
            if remaining_days > 0:
                warranty_status = f"C√≤n hi·ªáu l·ª±c ({remaining_days} ng√†y)"
                status_color = "green" if remaining_days > 30 else "orange"
                status_icon = "‚úÖ"
            else:
                warranty_status = "ƒê√£ h·∫øt h·∫°n"
                status_color = "red"
                status_icon = "‚ùå"
        except:
            warranty_status = "Kh√¥ng x√°c ƒë·ªãnh"
            status_color = "black"
            status_icon = "‚ùì"
        
        # Status display
        status_frame = ttk.Frame(self.warranty_results_frame)
        status_frame.pack(fill=tk.X, pady=(0, 15))
        
        ttk.Label(status_frame, text="T√¨nh tr·∫°ng b·∫£o h√†nh:", font=('Arial', 12, 'bold')).pack(anchor=tk.W)
        status_label = ttk.Label(status_frame, text=f"{status_icon} {warranty_status}", 
                                font=('Arial', 14, 'bold'))
        status_label.pack(anchor=tk.W, pady=(5, 0))
        
        # Product information
        info_frame = ttk.Frame(self.warranty_results_frame)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        info_data = [
            ("S·∫£n ph·∫©m:", f"{warranty['product_name']} ({warranty['brand']})" if warranty['product_name'] else "N/A"),
            ("IMEI:", warranty['imei'] or 'N/A'),
            ("Kh√°ch h√†ng:", warranty['customer_name'] or 'N/A'),
            ("SƒêT li√™n h·ªá:", warranty['customer_phone'] or 'N/A'),
            ("Ng√†y b·∫Øt ƒë·∫ßu BH:", warranty['start_date']),
            ("Ng√†y h·∫øt h·∫°n BH:", warranty['end_date']),
            ("Lo·∫°i b·∫£o h√†nh:", "S·∫£n ph·∫©m" if warranty['warranty_type'] == 'product' else "Sau s·ª≠a ch·ªØa")
        ]
        
        for label, value in info_data:
            row_frame = ttk.Frame(info_frame)
            row_frame.pack(fill=tk.X, pady=2)
            
            ttk.Label(row_frame, text=label, font=('Arial', 10, 'bold')).pack(side=tk.LEFT)
            ttk.Label(row_frame, text=str(value)).pack(side=tk.LEFT, padx=(10, 0))
        
        # Instructions
        instructions_frame = ttk.Frame(self.warranty_results_frame)
        instructions_frame.pack(fill=tk.X, pady=(15, 0))
        
        if remaining_days > 0:
            ttk.Label(instructions_frame, text="üìã H∆∞·ªõng d·∫´n b·∫£o h√†nh:", 
                     font=('Arial', 11, 'bold')).pack(anchor=tk.W)
            instructions = [
                "‚Ä¢ Mang s·∫£n ph·∫©m v√† phi·∫øu b·∫£o h√†nh ƒë·∫øn c·ª≠a h√†ng",
                "‚Ä¢ B·∫£o h√†nh kh√¥ng √°p d·ª•ng cho h∆∞ h·ªèng do ng∆∞·ªùi d√πng",
                "‚Ä¢ Th·ªùi gian b·∫£o h√†nh: 7-15 ng√†y l√†m vi·ªác",
                "‚Ä¢ Li√™n h·ªá c·ª≠a h√†ng ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt"
            ]
            
            for instruction in instructions:
                ttk.Label(instructions_frame, text=instruction, font=('Arial', 10)).pack(anchor=tk.W, pady=1)
        else:
            ttk.Label(instructions_frame, text="‚ùå S·∫£n ph·∫©m ƒë√£ h·∫øt th·ªùi gian b·∫£o h√†nh.", 
                     font=('Arial', 11, 'bold'), foreground='red').pack(anchor=tk.W)
    
    def scan_warranty_qr(self):
        """Scan warranty QR code"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng qu√©t QR code b·∫£o h√†nh s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def load_warranty_claims(self):
        """Load warranty claims"""
        # This would load warranty claim requests
        # For now, we'll show a placeholder
        pass
    
    def create_warranty_claim(self):
        """Create warranty claim"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng t·∫°o y√™u c·∫ßu b·∫£o h√†nh s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def process_warranty_claim(self):
        """Process warranty claim"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng x·ª≠ l√Ω y√™u c·∫ßu b·∫£o h√†nh s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def view_claim_details(self):
        """View warranty claim details"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng xem chi ti·∫øt y√™u c·∫ßu b·∫£o h√†nh s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def filter_expired_warranties(self):
        """Filter expired/expiring warranties"""
        filter_type = self.expiry_filter_var.get()
        
        # Clear existing items
        for item in self.expired_tree.get_children():
            self.expired_tree.delete(item)
        
        if filter_type == "expiring":
            # Warranties expiring in 30 days
            query = """
            SELECT w.*, c.name as customer_name, c.phone as customer_phone,
                   p.name as product_name, p.brand
            FROM warranties w
            LEFT JOIN customers c ON w.customer_id = c.id
            LEFT JOIN products p ON w.product_id = p.id
            WHERE w.status = 'active' AND 
                  DATE(w.end_date) BETWEEN DATE('now') AND DATE('now', '+30 days')
            ORDER BY w.end_date ASC
            """
        else:
            # Expired warranties
            query = """
            SELECT w.*, c.name as customer_name, c.phone as customer_phone,
                   p.name as product_name, p.brand
            FROM warranties w
            LEFT JOIN customers c ON w.customer_id = c.id
            LEFT JOIN products p ON w.product_id = p.id
            WHERE DATE(w.end_date) < DATE('now')
            ORDER BY w.end_date DESC
            """
        
        warranties = self.db_manager.fetch_all(query)
        
        for warranty in warranties:
            # Calculate remaining days
            try:
                end_date = datetime.strptime(warranty['end_date'], '%Y-%m-%d').date()
                remaining_days = (end_date - date.today()).days
                if remaining_days >= 0:
                    remaining_text = f"{remaining_days} ng√†y"
                else:
                    remaining_text = f"H·∫øt h·∫°n {abs(remaining_days)} ng√†y"
            except:
                remaining_text = "N/A"
            
            product_name = ""
            if warranty['product_name']:
                product_name = f"{warranty['product_name']}"
                if warranty['brand']:
                    product_name += f" ({warranty['brand']})"
            
            self.expired_tree.insert('', 'end', values=(
                warranty['warranty_number'],
                warranty['imei'] or '',
                warranty['customer_name'] or '',
                product_name,
                warranty['end_date'],
                remaining_text,
                warranty['customer_phone'] or ''
            ))
