#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Repair management tab for ChViet Mobile Store Management System
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, date
import uuid

from models import Repair, Customer
from utils.qr_utils import generate_qr_code
from config import BUSINESS_RULES

class RepairTab:
    def __init__(self, parent, db_manager, current_user):
        self.parent = parent
        self.db_manager = db_manager
        self.current_user = current_user
        
        self.frame = ttk.Frame(parent)
        self.setup_ui()
        self.load_data()
    
    def setup_ui(self):
        """Setup repair tab UI"""
        # Main container
        main_container = ttk.Frame(self.frame)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create notebook for sub-tabs
        self.notebook = ttk.Notebook(main_container)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # New Repair tab
        self.setup_new_repair_tab()
        
        # Repair List tab
        self.setup_repair_list_tab()
        
        # Repair Status tab
        self.setup_repair_status_tab()
    
    def setup_new_repair_tab(self):
        """Setup new repair registration tab"""
        new_repair_frame = ttk.Frame(self.notebook)
        self.notebook.add(new_repair_frame, text="Ti·∫øp Nh·∫≠n S·ª≠a Ch·ªØa")
        
        # Main form
        form_frame = ttk.LabelFrame(new_repair_frame, text="Th√¥ng tin s·ª≠a ch·ªØa", padding=20)
        form_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create form in two columns
        left_frame = ttk.Frame(form_frame)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 20))
        
        right_frame = ttk.Frame(form_frame)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # Left column - Basic info
        row = 0
        
        # Repair number
        ttk.Label(left_frame, text="S·ªë bi√™n nh·∫≠n:").grid(row=row, column=0, sticky=tk.W, pady=5)
        self.repair_number_var = tk.StringVar()
        repair_number_entry = ttk.Entry(left_frame, textvariable=self.repair_number_var, width=25, state="readonly")
        repair_number_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        
        ttk.Button(left_frame, text="T·∫°o m√£", 
                  command=self.generate_repair_number).grid(row=row, column=2, pady=5, padx=(5, 0))
        row += 1
        
        # Customer info
        ttk.Label(left_frame, text="Kh√°ch h√†ng *:").grid(row=row, column=0, sticky=tk.W, pady=5)
        self.customer_var = tk.StringVar()
        customer_combo = ttk.Combobox(left_frame, textvariable=self.customer_var, width=35)
        customer_combo.grid(row=row, column=1, columnspan=2, sticky=tk.W, pady=5, padx=(10, 0))
        self.load_customers_combo(customer_combo)
        
        ttk.Button(left_frame, text="‚ûï", 
                  command=self.add_customer).grid(row=row, column=3, pady=5, padx=(5, 0))
        row += 1
        
        # Device info
        ttk.Label(left_frame, text="Th√¥ng tin thi·∫øt b·ªã *:").grid(row=row, column=0, sticky=tk.W, pady=5)
        self.device_info_var = tk.StringVar()
        device_info_entry = ttk.Entry(left_frame, textvariable=self.device_info_var, width=40)
        device_info_entry.grid(row=row, column=1, columnspan=2, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # IMEI
        ttk.Label(left_frame, text="IMEI:").grid(row=row, column=0, sticky=tk.W, pady=5)
        self.imei_var = tk.StringVar()
        imei_entry = ttk.Entry(left_frame, textvariable=self.imei_var, width=40)
        imei_entry.grid(row=row, column=1, columnspan=2, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Problem description
        ttk.Label(left_frame, text="M√¥ t·∫£ l·ªói *:").grid(row=row, column=0, sticky=tk.NW, pady=5)
        self.problem_text = tk.Text(left_frame, width=40, height=6)
        self.problem_text.grid(row=row, column=1, columnspan=2, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Estimated completion
        ttk.Label(left_frame, text="D·ª± ki·∫øn ho√†n th√†nh:").grid(row=row, column=0, sticky=tk.W, pady=5)
        self.estimated_completion_var = tk.StringVar()
        estimated_entry = ttk.Entry(left_frame, textvariable=self.estimated_completion_var, width=25)
        estimated_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        
        ttk.Button(left_frame, text="H√¥m nay + 3", 
                  command=self.set_estimated_date).grid(row=row, column=2, pady=5, padx=(5, 0))
        row += 1
        
        # Right column - Cost and notes
        row = 0
        
        # Labor cost
        ttk.Label(right_frame, text="Ti·ªÅn c√¥ng:").grid(row=row, column=0, sticky=tk.W, pady=5)
        self.labor_cost_var = tk.StringVar(value="0")
        labor_cost_entry = ttk.Entry(right_frame, textvariable=self.labor_cost_var, width=20)
        labor_cost_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Parts cost
        ttk.Label(right_frame, text="Ti·ªÅn linh ki·ªán:").grid(row=row, column=0, sticky=tk.W, pady=5)
        self.parts_cost_var = tk.StringVar(value="0")
        parts_cost_entry = ttk.Entry(right_frame, textvariable=self.parts_cost_var, width=20)
        parts_cost_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Total cost (calculated)
        ttk.Label(right_frame, text="T·ªïng chi ph√≠:", font=('Arial', 10, 'bold')).grid(row=row, column=0, sticky=tk.W, pady=5)
        self.total_cost_label = ttk.Label(right_frame, text="0 VNƒê", 
                                         style="Success.TLabel", font=('Arial', 10, 'bold'))
        self.total_cost_label.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Bind cost calculation
        labor_cost_entry.bind('<KeyRelease>', self.calculate_total_cost)
        parts_cost_entry.bind('<KeyRelease>', self.calculate_total_cost)
        
        # Warranty months
        ttk.Label(right_frame, text="B·∫£o h√†nh (th√°ng):").grid(row=row, column=0, sticky=tk.W, pady=5)
        self.warranty_months_var = tk.StringVar(value="3")
        warranty_entry = ttk.Entry(right_frame, textvariable=self.warranty_months_var, width=20)
        warranty_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Pattern lock info
        ttk.Label(right_frame, text="Th√¥ng tin m·ªü kh√≥a:").grid(row=row, column=0, sticky=tk.NW, pady=5)
        self.pattern_text = tk.Text(right_frame, width=30, height=4)
        self.pattern_text.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Notes
        ttk.Label(right_frame, text="Ghi ch√∫:").grid(row=row, column=0, sticky=tk.NW, pady=5)
        self.notes_text = tk.Text(right_frame, width=30, height=4)
        self.notes_text.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Buttons
        btn_frame = ttk.Frame(form_frame)
        btn_frame.pack(fill=tk.X, pady=20)
        
        ttk.Button(btn_frame, text="üíæ L∆∞u bi√™n nh·∫≠n", 
                  command=self.save_repair).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="üñ®Ô∏è In bi√™n nh·∫≠n", 
                  command=self.print_repair_receipt).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="üóëÔ∏è X√≥a form", 
                  command=self.clear_form).pack(side=tk.LEFT, padx=5)
        
        # Generate initial repair number
        self.generate_repair_number()
    
    def setup_repair_list_tab(self):
        """Setup repair list management tab"""
        repair_list_frame = ttk.Frame(self.notebook)
        self.notebook.add(repair_list_frame, text="Danh S√°ch S·ª≠a Ch·ªØa")
        
        # Top controls
        top_frame = ttk.Frame(repair_list_frame)
        top_frame.pack(fill=tk.X, pady=(10, 10), padx=10)
        
        # Search frame
        search_frame = ttk.LabelFrame(top_frame, text="T√¨m ki·∫øm", padding=10)
        search_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        ttk.Label(search_frame, text="S·ªë bi√™n nh·∫≠n / IMEI / KH:").pack(anchor=tk.W)
        self.repair_search_var = tk.StringVar()
        self.repair_search_var.trace('w', self.on_repair_search)
        search_entry = ttk.Entry(search_frame, textvariable=self.repair_search_var, width=40)
        search_entry.pack(pady=5, fill=tk.X)
        
        # Status filter
        status_frame = ttk.LabelFrame(top_frame, text="L·ªçc tr·∫°ng th√°i", padding=10)
        status_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        self.status_filter_var = tk.StringVar(value="all")
        status_values = [
            ("all", "T·∫•t c·∫£"),
            ("received", "ƒê√£ ti·∫øp nh·∫≠n"),
            ("diagnosing", "ƒêang ch·∫©n ƒëo√°n"),
            ("repairing", "ƒêang s·ª≠a ch·ªØa"),
            ("waiting_parts", "Ch·ªù linh ki·ªán"),
            ("completed", "Ho√†n th√†nh"),
            ("customer_notified", "ƒê√£ b√°o kh√°ch"),
            ("delivered", "ƒê√£ giao"),
            ("cancelled", "H·ªßy b·ªè")
        ]
        
        for value, text in status_values:
            ttk.Radiobutton(status_frame, text=text, variable=self.status_filter_var,
                           value=value, command=self.filter_repairs).pack(anchor=tk.W)
        
        # Control buttons
        btn_frame = ttk.Frame(top_frame)
        btn_frame.pack(side=tk.RIGHT)
        
        ttk.Button(btn_frame, text="üëÅÔ∏è Xem chi ti·∫øt", 
                  command=self.view_repair_details).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="‚úèÔ∏è S·ª≠a", 
                  command=self.edit_repair).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="üìã C·∫≠p nh·∫≠t tr·∫°ng th√°i", 
                  command=self.update_repair_status).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="üñ®Ô∏è In bi√™n nh·∫≠n", 
                  command=self.print_selected_receipt).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="üîî Th√¥ng b√°o kh√°ch", 
                  command=self.notify_customer).pack(pady=2, fill=tk.X)
        ttk.Button(btn_frame, text="üîÑ L√†m m·ªõi", 
                  command=self.refresh_repairs).pack(pady=2, fill=tk.X)
        
        # Repairs treeview
        tree_frame = ttk.Frame(repair_list_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL)
        h_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.HORIZONTAL)
        
        self.repairs_tree = ttk.Treeview(tree_frame,
                                        columns=('id', 'repair_number', 'date', 'customer', 'device',
                                               'imei', 'problem', 'status', 'total_cost', 'completion'),
                                        show='headings',
                                        yscrollcommand=v_scrollbar.set,
                                        xscrollcommand=h_scrollbar.set)
        
        # Configure scrollbars
        v_scrollbar.config(command=self.repairs_tree.yview)
        h_scrollbar.config(command=self.repairs_tree.xview)
        
        # Column headings
        columns = {
            'id': ('ID', 50),
            'repair_number': ('S·ªë bi√™n nh·∫≠n', 120),
            'date': ('Ng√†y ti·∫øp nh·∫≠n', 120),
            'customer': ('Kh√°ch h√†ng', 150),
            'device': ('Thi·∫øt b·ªã', 150),
            'imei': ('IMEI', 150),
            'problem': ('L·ªói', 200),
            'status': ('Tr·∫°ng th√°i', 120),
            'total_cost': ('Chi ph√≠', 100),
            'completion': ('Ho√†n th√†nh', 100)
        }
        
        for col, (heading, width) in columns.items():
            self.repairs_tree.heading(col, text=heading)
            self.repairs_tree.column(col, width=width, minwidth=50)
        
        # Pack treeview and scrollbars
        self.repairs_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Bind double-click
        self.repairs_tree.bind('<Double-1>', lambda e: self.view_repair_details())
    
    def setup_repair_status_tab(self):
        """Setup repair status tracking tab"""
        status_frame = ttk.Frame(self.notebook)
        self.notebook.add(status_frame, text="Tra C·ª©u Tr·∫°ng Th√°i")
        
        # Search section
        search_section = ttk.LabelFrame(status_frame, text="Tra c·ª©u theo QR Code / S·ªë bi√™n nh·∫≠n", padding=20)
        search_section.pack(fill=tk.X, padx=20, pady=20)
        
        # QR Code lookup
        ttk.Label(search_section, text="Qu√©t QR Code ho·∫∑c nh·∫≠p s·ªë bi√™n nh·∫≠n:", 
                 style="Heading.TLabel").pack(anchor=tk.W, pady=(0, 10))
        
        lookup_frame = ttk.Frame(search_section)
        lookup_frame.pack(fill=tk.X)
        
        self.qr_lookup_var = tk.StringVar()
        qr_entry = ttk.Entry(lookup_frame, textvariable=self.qr_lookup_var, width=30, font=('Arial', 14))
        qr_entry.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(lookup_frame, text="üîç Tra c·ª©u", 
                  command=self.lookup_repair_status).pack(side=tk.LEFT, padx=5)
        ttk.Button(lookup_frame, text="üì∑ Qu√©t QR", 
                  command=self.scan_qr_code).pack(side=tk.LEFT, padx=5)
        
        # Results section
        self.results_frame = ttk.LabelFrame(status_frame, text="K·∫øt qu·∫£ tra c·ª©u", padding=20)
        self.results_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        # Initially hide results
        self.results_frame.pack_forget()
        
        # Focus on QR entry
        qr_entry.focus_set()
    
    def load_data(self):
        """Load all data"""
        self.refresh_repairs()
    
    def load_customers_combo(self, combo):
        """Load customers into combobox"""
        customers = self.db_manager.fetch_all("SELECT id, name, phone FROM customers ORDER BY name")
        combo['values'] = [""] + [f"{c['id']} - {c['name']} ({c['phone']})" for c in customers if c['phone']]
    
    def generate_repair_number(self):
        """Generate unique repair number"""
        repair_number = f"SC{datetime.now().strftime('%Y%m%d%H%M%S')}"
        self.repair_number_var.set(repair_number)
    
    def set_estimated_date(self):
        """Set estimated completion date to today + 3 days"""
        from datetime import timedelta
        estimated_date = (date.today() + timedelta(days=3)).strftime('%Y-%m-%d')
        self.estimated_completion_var.set(estimated_date)
    
    def calculate_total_cost(self, event=None):
        """Calculate total repair cost"""
        try:
            labor_cost = float(self.labor_cost_var.get() or 0)
            parts_cost = float(self.parts_cost_var.get() or 0)
            total = labor_cost + parts_cost
            
            self.total_cost_label.config(text=f"{total:,.0f} VNƒê")
        except ValueError:
            self.total_cost_label.config(text="0 VNƒê")
    
    def add_customer(self):
        """Add new customer"""
        # Use the same customer dialog from sales tab
        self.show_customer_dialog()
    
    def show_customer_dialog(self):
        """Show add customer dialog"""
        dialog = tk.Toplevel(self.frame)
        dialog.title("Th√™m kh√°ch h√†ng")
        dialog.geometry("500x400")
        dialog.transient(self.frame)
        dialog.grab_set()
        
        # Main frame
        main_frame = ttk.Frame(dialog, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        row = 0
        
        # Name
        ttk.Label(main_frame, text="T√™n kh√°ch h√†ng *:").grid(row=row, column=0, sticky=tk.W, pady=5)
        name_var = tk.StringVar()
        name_entry = ttk.Entry(main_frame, textvariable=name_var, width=40)
        name_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Phone
        ttk.Label(main_frame, text="S·ªë ƒëi·ªán tho·∫°i *:").grid(row=row, column=0, sticky=tk.W, pady=5)
        phone_var = tk.StringVar()
        phone_entry = ttk.Entry(main_frame, textvariable=phone_var, width=40)
        phone_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Address
        ttk.Label(main_frame, text="ƒê·ªãa ch·ªâ:").grid(row=row, column=0, sticky=tk.NW, pady=5)
        address_text = tk.Text(main_frame, width=40, height=3)
        address_text.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        row += 1
        
        # Buttons
        btn_frame = ttk.Frame(main_frame)
        btn_frame.grid(row=row, column=0, columnspan=2, pady=20)
        
        def save_customer():
            if not name_var.get().strip() or not phone_var.get().strip():
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n v√† s·ªë ƒëi·ªán tho·∫°i!")
                return
            
            data = {
                'name': name_var.get().strip(),
                'phone': phone_var.get().strip(),
                'address': address_text.get('1.0', tk.END).strip(),
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }
            
            try:
                columns = ', '.join(data.keys())
                placeholders = ', '.join(['?' for _ in data])
                query = f"INSERT INTO customers ({columns}) VALUES ({placeholders})"
                self.db_manager.execute_query(query, list(data.values()))
                
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m kh√°ch h√†ng!")
                dialog.destroy()
                
                # Reload customer combo
                for widget in self.frame.winfo_children():
                    if isinstance(widget, ttk.Frame):
                        for subwidget in widget.winfo_children():
                            if isinstance(subwidget, ttk.Notebook):
                                # Find and reload customer combo
                                pass
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u kh√°ch h√†ng: {e}")
        
        ttk.Button(btn_frame, text="üíæ L∆∞u", command=save_customer).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="‚ùå H·ªßy", command=dialog.destroy).pack(side=tk.LEFT, padx=5)
        
        # Focus on name entry
        name_entry.focus_set()
    
    def save_repair(self):
        """Save repair record"""
        # Validate required fields
        if not self.repair_number_var.get().strip():
            messagebox.showerror("L·ªói", "Vui l√≤ng t·∫°o s·ªë bi√™n nh·∫≠n!")
            return
        
        if not self.customer_var.get():
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn kh√°ch h√†ng!")
            return
        
        if not self.device_info_var.get().strip():
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p th√¥ng tin thi·∫øt b·ªã!")
            return
        
        if not self.problem_text.get('1.0', tk.END).strip():
            messagebox.showerror("L·ªói", "Vui l√≤ng m√¥ t·∫£ l·ªói!")
            return
        
        try:
            # Get customer ID
            customer_id = int(self.customer_var.get().split(' - ')[0])
            
            # Get costs
            labor_cost = float(self.labor_cost_var.get() or 0)
            parts_cost = float(self.parts_cost_var.get() or 0)
            total_cost = labor_cost + parts_cost
            warranty_months = int(self.warranty_months_var.get() or 3)
            
            # Generate QR code
            qr_code = generate_qr_code(f"REPAIR:{self.repair_number_var.get()}")
            
            # Prepare repair data
            repair_data = {
                'repair_number': self.repair_number_var.get().strip(),
                'customer_id': customer_id,
                'staff_id': self.current_user['id'],
                'device_info': self.device_info_var.get().strip(),
                'imei': self.imei_var.get().strip(),
                'problem_description': self.problem_text.get('1.0', tk.END).strip(),
                'repair_status': 'received',
                'labor_cost': labor_cost,
                'parts_cost': parts_cost,
                'total_cost': total_cost,
                'estimated_completion': self.estimated_completion_var.get() if self.estimated_completion_var.get() else None,
                'warranty_months': warranty_months,
                'qr_code': qr_code,
                'pattern_lock_info': self.pattern_text.get('1.0', tk.END).strip(),
                'notes': self.notes_text.get('1.0', tk.END).strip(),
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }
            
            # Insert repair record
            columns = ', '.join(repair_data.keys())
            placeholders = ', '.join(['?' for _ in repair_data])
            query = f"INSERT INTO repairs ({columns}) VALUES ({placeholders})"
            cursor = self.db_manager.execute_query(query, list(repair_data.values()))
            repair_id = cursor.lastrowid
            
            # Create transaction record
            transaction_data = {
                'transaction_type': 'expense',
                'amount': 0,  # No payment yet
                'description': f'Ti·∫øp nh·∫≠n s·ª≠a ch·ªØa - {self.repair_number_var.get()}',
                'reference_id': repair_id,
                'reference_type': 'repair',
                'payment_method': 'cash',
                'staff_id': self.current_user['id'],
                'transaction_date': datetime.now().isoformat(),
                'created_at': datetime.now().isoformat()
            }
            
            columns = ', '.join(transaction_data.keys())
            placeholders = ', '.join(['?' for _ in transaction_data])
            query = f"INSERT INTO transactions ({columns}) VALUES ({placeholders})"
            self.db_manager.execute_query(query, list(transaction_data.values()))
            
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫°o bi√™n nh·∫≠n s·ª≠a ch·ªØa {self.repair_number_var.get()}!")
            
            # Ask to print receipt
            if messagebox.askyesno("In bi√™n nh·∫≠n", "B·∫°n c√≥ mu·ªën in bi√™n nh·∫≠n kh√¥ng?"):
                self.print_repair_receipt_by_id(repair_id)
            
            # Clear form
            self.clear_form()
            
            # Refresh repairs list
            self.refresh_repairs()
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u bi√™n nh·∫≠n: {e}")
    
    def print_repair_receipt(self):
        """Print repair receipt for current form"""
        repair_number = self.repair_number_var.get()
        if not repair_number:
            messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a c√≥ s·ªë bi√™n nh·∫≠n!")
            return
        
        # Find repair by number
        repair = self.db_manager.fetch_one(
            "SELECT id FROM repairs WHERE repair_number = ?",
            (repair_number,)
        )
        
        if repair:
            self.print_repair_receipt_by_id(repair['id'])
        else:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng l∆∞u bi√™n nh·∫≠n tr∆∞·ªõc khi in!")
    
    def print_repair_receipt_by_id(self, repair_id):
        """Print repair receipt by ID"""
        try:
            from utils.print_utils import print_repair_receipt
            print_repair_receipt(self.db_manager, repair_id)
        except Exception as e:
            messagebox.showerror("L·ªói in", f"Kh√¥ng th·ªÉ in bi√™n nh·∫≠n: {e}")
    
    def clear_form(self):
        """Clear all form fields"""
        self.generate_repair_number()
        self.customer_var.set("")
        self.device_info_var.set("")
        self.imei_var.set("")
        self.problem_text.delete('1.0', tk.END)
        self.estimated_completion_var.set("")
        self.labor_cost_var.set("0")
        self.parts_cost_var.set("0")
        self.warranty_months_var.set("3")
        self.pattern_text.delete('1.0', tk.END)
        self.notes_text.delete('1.0', tk.END)
        self.calculate_total_cost()
    
    def refresh_repairs(self):
        """Refresh repairs list"""
        # Clear existing items
        for item in self.repairs_tree.get_children():
            self.repairs_tree.delete(item)
        
        # Load repairs
        query = """
        SELECT r.*, c.name as customer_name, c.phone as customer_phone
        FROM repairs r
        LEFT JOIN customers c ON r.customer_id = c.id
        ORDER BY r.created_at DESC
        """
        
        repairs = self.db_manager.fetch_all(query)
        
        for repair in repairs:
            repair_date = datetime.fromisoformat(repair['created_at']).strftime('%d/%m/%Y')
            completion_date = ""
            if repair['actual_completion']:
                completion_date = datetime.fromisoformat(repair['actual_completion']).strftime('%d/%m/%Y')
            elif repair['estimated_completion']:
                completion_date = f"DK: {repair['estimated_completion']}"
            
            # Status translation
            status_map = {
                'received': 'ƒê√£ ti·∫øp nh·∫≠n',
                'diagnosing': 'ƒêang ch·∫©n ƒëo√°n',
                'repairing': 'ƒêang s·ª≠a ch·ªØa',
                'waiting_parts': 'Ch·ªù linh ki·ªán',
                'completed': 'Ho√†n th√†nh',
                'customer_notified': 'ƒê√£ b√°o kh√°ch',
                'delivered': 'ƒê√£ giao',
                'cancelled': 'H·ªßy b·ªè'
            }
            
            status_text = status_map.get(repair['repair_status'], repair['repair_status'])
            
            self.repairs_tree.insert('', 'end', values=(
                repair['id'],
                repair['repair_number'],
                repair_date,
                repair['customer_name'] or '',
                repair['device_info'][:30] + "..." if len(repair['device_info']) > 30 else repair['device_info'],
                repair['imei'] or '',
                repair['problem_description'][:50] + "..." if len(repair['problem_description']) > 50 else repair['problem_description'],
                status_text,
                f"{repair['total_cost']:,.0f}",
                completion_date
            ))
    
    def on_repair_search(self, *args):
        """Handle repair search"""
        search_term = self.repair_search_var.get().lower()
        
        if not search_term:
            self.refresh_repairs()
            return
        
        # Clear existing items
        for item in self.repairs_tree.get_children():
            self.repairs_tree.delete(item)
        
        # Search repairs
        query = """
        SELECT r.*, c.name as customer_name, c.phone as customer_phone
        FROM repairs r
        LEFT JOIN customers c ON r.customer_id = c.id
        WHERE LOWER(r.repair_number) LIKE ? OR
              LOWER(r.imei) LIKE ? OR
              LOWER(c.name) LIKE ? OR
              LOWER(r.device_info) LIKE ?
        ORDER BY r.created_at DESC
        """
        
        search_pattern = f"%{search_term}%"
        repairs = self.db_manager.fetch_all(query, (search_pattern, search_pattern, 
                                                   search_pattern, search_pattern))
        
        for repair in repairs:
            repair_date = datetime.fromisoformat(repair['created_at']).strftime('%d/%m/%Y')
            completion_date = ""
            if repair['actual_completion']:
                completion_date = datetime.fromisoformat(repair['actual_completion']).strftime('%d/%m/%Y')
            elif repair['estimated_completion']:
                completion_date = f"DK: {repair['estimated_completion']}"
            
            status_map = {
                'received': 'ƒê√£ ti·∫øp nh·∫≠n',
                'diagnosing': 'ƒêang ch·∫©n ƒëo√°n',
                'repairing': 'ƒêang s·ª≠a ch·ªØa',
                'waiting_parts': 'Ch·ªù linh ki·ªán',
                'completed': 'Ho√†n th√†nh',
                'customer_notified': 'ƒê√£ b√°o kh√°ch',
                'delivered': 'ƒê√£ giao',
                'cancelled': 'H·ªßy b·ªè'
            }
            
            status_text = status_map.get(repair['repair_status'], repair['repair_status'])
            
            self.repairs_tree.insert('', 'end', values=(
                repair['id'],
                repair['repair_number'],
                repair_date,
                repair['customer_name'] or '',
                repair['device_info'][:30] + "..." if len(repair['device_info']) > 30 else repair['device_info'],
                repair['imei'] or '',
                repair['problem_description'][:50] + "..." if len(repair['problem_description']) > 50 else repair['problem_description'],
                status_text,
                f"{repair['total_cost']:,.0f}",
                completion_date
            ))
    
    def filter_repairs(self):
        """Filter repairs by status"""
        status_filter = self.status_filter_var.get()
        
        # Clear existing items
        for item in self.repairs_tree.get_children():
            self.repairs_tree.delete(item)
        
        # Build query based on filter
        if status_filter == "all":
            query = """
            SELECT r.*, c.name as customer_name, c.phone as customer_phone
            FROM repairs r
            LEFT JOIN customers c ON r.customer_id = c.id
            ORDER BY r.created_at DESC
            """
            params = ()
        else:
            query = """
            SELECT r.*, c.name as customer_name, c.phone as customer_phone
            FROM repairs r
            LEFT JOIN customers c ON r.customer_id = c.id
            WHERE r.repair_status = ?
            ORDER BY r.created_at DESC
            """
            params = (status_filter,)
        
        repairs = self.db_manager.fetch_all(query, params)
        
        for repair in repairs:
            repair_date = datetime.fromisoformat(repair['created_at']).strftime('%d/%m/%Y')
            completion_date = ""
            if repair['actual_completion']:
                completion_date = datetime.fromisoformat(repair['actual_completion']).strftime('%d/%m/%Y')
            elif repair['estimated_completion']:
                completion_date = f"DK: {repair['estimated_completion']}"
            
            status_map = {
                'received': 'ƒê√£ ti·∫øp nh·∫≠n',
                'diagnosing': 'ƒêang ch·∫©n ƒëo√°n',
                'repairing': 'ƒêang s·ª≠a ch·ªØa',
                'waiting_parts': 'Ch·ªù linh ki·ªán',
                'completed': 'Ho√†n th√†nh',
                'customer_notified': 'ƒê√£ b√°o kh√°ch',
                'delivered': 'ƒê√£ giao',
                'cancelled': 'H·ªßy b·ªè'
            }
            
            status_text = status_map.get(repair['repair_status'], repair['repair_status'])
            
            self.repairs_tree.insert('', 'end', values=(
                repair['id'],
                repair['repair_number'],
                repair_date,
                repair['customer_name'] or '',
                repair['device_info'][:30] + "..." if len(repair['device_info']) > 30 else repair['device_info'],
                repair['imei'] or '',
                repair['problem_description'][:50] + "..." if len(repair['problem_description']) > 50 else repair['problem_description'],
                status_text,
                f"{repair['total_cost']:,.0f}",
                completion_date
            ))
    
    def view_repair_details(self):
        """View repair details"""
        selection = self.repairs_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn bi√™n nh·∫≠n!")
            return
        
        item = self.repairs_tree.item(selection[0])
        repair_id = item['values'][0]
        self.show_repair_details_dialog(repair_id)
    
    def show_repair_details_dialog(self, repair_id):
        """Show repair details dialog"""
        dialog = tk.Toplevel(self.frame)
        dialog.title("Chi ti·∫øt s·ª≠a ch·ªØa")
        dialog.geometry("800x700")
        dialog.transient(self.frame)
        
        # Load repair data
        repair = self.db_manager.fetch_one(
            """SELECT r.*, c.name as customer_name, c.phone as customer_phone,
                      c.address as customer_address, st.full_name as staff_name
               FROM repairs r
               LEFT JOIN customers c ON r.customer_id = c.id
               LEFT JOIN staff st ON r.staff_id = st.id
               WHERE r.id = ?""",
            (repair_id,)
        )
        
        if not repair:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y bi√™n nh·∫≠n!")
            dialog.destroy()
            return
        
        main_frame = ttk.Frame(dialog, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create notebook for tabs
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # Basic info tab
        info_frame = ttk.Frame(notebook)
        notebook.add(info_frame, text="Th√¥ng tin c∆° b·∫£n")
        
        info_container = ttk.Frame(info_frame, padding=20)
        info_container.pack(fill=tk.BOTH, expand=True)
        
        # Repair information
        repair_info_frame = ttk.LabelFrame(info_container, text="Th√¥ng tin s·ª≠a ch·ªØa", padding=10)
        repair_info_frame.pack(fill=tk.X, pady=(0, 10))
        
        info_data = [
            ("S·ªë bi√™n nh·∫≠n:", repair['repair_number']),
            ("Ng√†y ti·∫øp nh·∫≠n:", datetime.fromisoformat(repair['created_at']).strftime('%d/%m/%Y %H:%M')),
            ("Nh√¢n vi√™n ti·∫øp nh·∫≠n:", repair['staff_name'] or ''),
            ("Tr·∫°ng th√°i:", repair['repair_status']),
            ("Chi ph√≠ t·ªïng:", f"{repair['total_cost']:,.0f} VNƒê"),
            ("ƒê√£ thanh to√°n:", f"{repair['paid_amount']:,.0f} VNƒê")
        ]
        
        for i, (label, value) in enumerate(info_data):
            row, col = divmod(i, 2)
            ttk.Label(repair_info_frame, text=label).grid(row=row, column=col*2, sticky=tk.W, padx=5, pady=2)
            ttk.Label(repair_info_frame, text=str(value), font=('Arial', 10, 'bold')).grid(
                row=row, column=col*2+1, sticky=tk.W, padx=5, pady=2)
        
        # Customer information
        customer_info_frame = ttk.LabelFrame(info_container, text="Th√¥ng tin kh√°ch h√†ng", padding=10)
        customer_info_frame.pack(fill=tk.X, pady=(0, 10))
        
        customer_data = [
            ("T√™n kh√°ch h√†ng:", repair['customer_name'] or ''),
            ("S·ªë ƒëi·ªán tho·∫°i:", repair['customer_phone'] or ''),
            ("ƒê·ªãa ch·ªâ:", repair['customer_address'] or '')
        ]
        
        for i, (label, value) in enumerate(customer_data):
            ttk.Label(customer_info_frame, text=label).grid(row=i, column=0, sticky=tk.W, padx=5, pady=2)
            ttk.Label(customer_info_frame, text=str(value), font=('Arial', 10, 'bold')).grid(
                row=i, column=1, sticky=tk.W, padx=5, pady=2)
        
        # Device information
        device_info_frame = ttk.LabelFrame(info_container, text="Th√¥ng tin thi·∫øt b·ªã", padding=10)
        device_info_frame.pack(fill=tk.X, pady=(0, 10))
        
        device_data = [
            ("Thi·∫øt b·ªã:", repair['device_info'] or ''),
            ("IMEI:", repair['imei'] or ''),
            ("M√¥ t·∫£ l·ªói:", repair['problem_description'] or ''),
            ("Ch·∫©n ƒëo√°n:", repair['diagnosis'] or '')
        ]
        
        for i, (label, value) in enumerate(device_data):
            ttk.Label(device_info_frame, text=label).grid(row=i, column=0, sticky=tk.NW, padx=5, pady=2)
            if len(str(value)) > 50:
                # Use text widget for long content
                text_widget = tk.Text(device_info_frame, width=60, height=3, wrap=tk.WORD)
                text_widget.insert('1.0', str(value))
                text_widget.config(state=tk.DISABLED)
                text_widget.grid(row=i, column=1, sticky=tk.W, padx=5, pady=2)
            else:
                ttk.Label(device_info_frame, text=str(value), font=('Arial', 10, 'bold')).grid(
                    row=i, column=1, sticky=tk.W, padx=5, pady=2)
        
        # Status history tab
        history_frame = ttk.Frame(notebook)
        notebook.add(history_frame, text="L·ªãch s·ª≠ tr·∫°ng th√°i")
        
        # Parts used tab
        parts_frame = ttk.Frame(notebook)
        notebook.add(parts_frame, text="Linh ki·ªán s·ª≠ d·ª•ng")
        
        # QR Code tab
        qr_frame = ttk.Frame(notebook)
        notebook.add(qr_frame, text="QR Code")
        
        if repair['qr_code']:
            qr_container = ttk.Frame(qr_frame, padding=20)
            qr_container.pack(fill=tk.BOTH, expand=True)
            
            ttk.Label(qr_container, text="QR Code tra c·ª©u tr·∫°ng th√°i:", 
                     style="Heading.TLabel").pack(anchor=tk.W, pady=(0, 10))
            
            # Display QR code info
            ttk.Label(qr_container, text=f"M√£ tra c·ª©u: {repair['repair_number']}", 
                     font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=5)
            ttk.Label(qr_container, text="Kh√°ch h√†ng c√≥ th·ªÉ qu√©t QR code n√†y ƒë·ªÉ tra c·ª©u tr·∫°ng th√°i s·ª≠a ch·ªØa.", 
                     font=('Arial', 10)).pack(anchor=tk.W, pady=5)
        
        # Buttons
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(btn_frame, text="üñ®Ô∏è In bi√™n nh·∫≠n", 
                  command=lambda: self.print_repair_receipt_by_id(repair_id)).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="‚úèÔ∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i", 
                  command=lambda: self.update_repair_status_dialog(repair_id)).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="ƒê√≥ng", 
                  command=dialog.destroy).pack(side=tk.RIGHT, padx=5)
    
    def edit_repair(self):
        """Edit selected repair"""
        selection = self.repairs_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn bi√™n nh·∫≠n!")
            return
        
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng s·ª≠a bi√™n nh·∫≠n s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def update_repair_status(self):
        """Update repair status"""
        selection = self.repairs_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn bi√™n nh·∫≠n!")
            return
        
        item = self.repairs_tree.item(selection[0])
        repair_id = item['values'][0]
        self.update_repair_status_dialog(repair_id)
    
    def update_repair_status_dialog(self, repair_id):
        """Show update repair status dialog"""
        dialog = tk.Toplevel(self.frame)
        dialog.title("C·∫≠p nh·∫≠t tr·∫°ng th√°i s·ª≠a ch·ªØa")
        dialog.geometry("400x300")
        dialog.transient(self.frame)
        dialog.grab_set()
        
        # Load current repair data
        repair = self.db_manager.fetch_one("SELECT * FROM repairs WHERE id = ?", (repair_id,))
        if not repair:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y bi√™n nh·∫≠n!")
            dialog.destroy()
            return
        
        main_frame = ttk.Frame(dialog, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Current status
        ttk.Label(main_frame, text=f"Bi√™n nh·∫≠n: {repair['repair_number']}", 
                 style="Heading.TLabel").pack(anchor=tk.W, pady=(0, 10))
        ttk.Label(main_frame, text=f"Tr·∫°ng th√°i hi·ªán t·∫°i: {repair['repair_status']}", 
                 font=('Arial', 10, 'bold')).pack(anchor=tk.W, pady=(0, 20))
        
        # New status
        ttk.Label(main_frame, text="Tr·∫°ng th√°i m·ªõi:").pack(anchor=tk.W, pady=5)
        status_var = tk.StringVar(value=repair['repair_status'])
        
        status_options = [
            ('received', 'ƒê√£ ti·∫øp nh·∫≠n'),
            ('diagnosing', 'ƒêang ch·∫©n ƒëo√°n'),
            ('repairing', 'ƒêang s·ª≠a ch·ªØa'),
            ('waiting_parts', 'Ch·ªù linh ki·ªán'),
            ('completed', 'Ho√†n th√†nh'),
            ('customer_notified', 'ƒê√£ b√°o kh√°ch'),
            ('delivered', 'ƒê√£ giao'),
            ('cancelled', 'H·ªßy b·ªè')
        ]
        
        for value, text in status_options:
            ttk.Radiobutton(main_frame, text=text, variable=status_var, value=value).pack(anchor=tk.W, pady=2)
        
        # Notes
        ttk.Label(main_frame, text="Ghi ch√∫:").pack(anchor=tk.W, pady=(10, 5))
        notes_text = tk.Text(main_frame, width=40, height=4)
        notes_text.pack(fill=tk.X, pady=5)
        
        # Buttons
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=20)
        
        def save_status():
            new_status = status_var.get()
            notes = notes_text.get('1.0', tk.END).strip()
            
            try:
                # Update repair status
                update_data = {
                    'repair_status': new_status,
                    'updated_at': datetime.now().isoformat()
                }
                
                # If completed, set actual completion date
                if new_status == 'completed':
                    update_data['actual_completion'] = date.today().isoformat()
                
                set_clause = ', '.join([f"{key} = ?" for key in update_data.keys()])
                query = f"UPDATE repairs SET {set_clause} WHERE id = ?"
                params = list(update_data.values()) + [repair_id]
                
                self.db_manager.execute_query(query, params)
                
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i!")
                dialog.destroy()
                self.refresh_repairs()
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i: {e}")
        
        ttk.Button(btn_frame, text="üíæ L∆∞u", command=save_status).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="‚ùå H·ªßy", command=dialog.destroy).pack(side=tk.LEFT, padx=5)
    
    def print_selected_receipt(self):
        """Print selected repair receipt"""
        selection = self.repairs_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn bi√™n nh·∫≠n!")
            return
        
        item = self.repairs_tree.item(selection[0])
        repair_id = item['values'][0]
        self.print_repair_receipt_by_id(repair_id)
    
    def notify_customer(self):
        """Notify customer about repair status"""
        selection = self.repairs_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn bi√™n nh·∫≠n!")
            return
        
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng th√¥ng b√°o kh√°ch h√†ng s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
    
    def lookup_repair_status(self):
        """Lookup repair status by QR code or repair number"""
        lookup_value = self.qr_lookup_var.get().strip()
        if not lookup_value:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p m√£ tra c·ª©u!")
            return
        
        # Extract repair number from QR code if necessary
        repair_number = lookup_value
        if lookup_value.startswith("REPAIR:"):
            repair_number = lookup_value.replace("REPAIR:", "")
        
        # Find repair
        repair = self.db_manager.fetch_one(
            """SELECT r.*, c.name as customer_name, c.phone as customer_phone
               FROM repairs r
               LEFT JOIN customers c ON r.customer_id = c.id
               WHERE r.repair_number = ?""",
            (repair_number,)
        )
        
        if not repair:
            # Hide results frame
            self.results_frame.pack_forget()
            messagebox.showwarning("Kh√¥ng t√¨m th·∫•y", f"Kh√¥ng t√¨m th·∫•y bi√™n nh·∫≠n v·ªõi m√£: {repair_number}")
            return
        
        # Show results
        self.show_repair_status_results(repair)
    
    def show_repair_status_results(self, repair):
        """Show repair status lookup results"""
        # Clear existing results
        for widget in self.results_frame.winfo_children():
            widget.destroy()
        
        # Show results frame
        self.results_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        # Title
        ttk.Label(self.results_frame, text=f"K·∫øt qu·∫£ tra c·ª©u - {repair['repair_number']}", 
                 style="Heading.TLabel").pack(anchor=tk.W, pady=(0, 15))
        
        # Create info display
        info_frame = ttk.Frame(self.results_frame)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Status with color coding
        status_map = {
            'received': ('ƒê√£ ti·∫øp nh·∫≠n', 'blue'),
            'diagnosing': ('ƒêang ch·∫©n ƒëo√°n', 'orange'),
            'repairing': ('ƒêang s·ª≠a ch·ªØa', 'orange'),
            'waiting_parts': ('Ch·ªù linh ki·ªán', 'red'),
            'completed': ('Ho√†n th√†nh', 'green'),
            'customer_notified': ('ƒê√£ b√°o kh√°ch', 'green'),
            'delivered': ('ƒê√£ giao', 'green'),
            'cancelled': ('H·ªßy b·ªè', 'red')
        }
        
        status_text, status_color = status_map.get(repair['repair_status'], (repair['repair_status'], 'black'))
        
        ttk.Label(info_frame, text="Tr·∫°ng th√°i hi·ªán t·∫°i:", font=('Arial', 12, 'bold')).pack(anchor=tk.W)
        status_label = ttk.Label(info_frame, text=status_text, font=('Arial', 14, 'bold'))
        status_label.pack(anchor=tk.W, pady=(5, 15))
        
        # Basic information
        info_data = [
            ("Thi·∫øt b·ªã:", repair['device_info']),
            ("IMEI:", repair['imei'] or 'N/A'),
            ("Ng√†y ti·∫øp nh·∫≠n:", datetime.fromisoformat(repair['created_at']).strftime('%d/%m/%Y')),
            ("Kh√°ch h√†ng:", repair['customer_name']),
            ("SƒêT li√™n h·ªá:", repair['customer_phone'] or 'N/A'),
            ("M√¥ t·∫£ l·ªói:", repair['problem_description']),
            ("Chi ph√≠ d·ª± ki·∫øn:", f"{repair['total_cost']:,.0f} VNƒê")
        ]
        
        for label, value in info_data:
            row_frame = ttk.Frame(info_frame)
            row_frame.pack(fill=tk.X, pady=2)
            
            ttk.Label(row_frame, text=label, font=('Arial', 10, 'bold')).pack(side=tk.LEFT)
            ttk.Label(row_frame, text=str(value)).pack(side=tk.LEFT, padx=(10, 0))
        
        # Completion date
        if repair['estimated_completion']:
            completion_frame = ttk.Frame(info_frame)
            completion_frame.pack(fill=tk.X, pady=(10, 0))
            
            ttk.Label(completion_frame, text="D·ª± ki·∫øn ho√†n th√†nh:", 
                     font=('Arial', 10, 'bold')).pack(side=tk.LEFT)
            ttk.Label(completion_frame, text=repair['estimated_completion']).pack(side=tk.LEFT, padx=(10, 0))
        
        if repair['actual_completion']:
            completion_frame = ttk.Frame(info_frame)
            completion_frame.pack(fill=tk.X, pady=2)
            
            ttk.Label(completion_frame, text="ƒê√£ ho√†n th√†nh:", 
                     font=('Arial', 10, 'bold')).pack(side=tk.LEFT)
            ttk.Label(completion_frame, text=repair['actual_completion']).pack(side=tk.LEFT, padx=(10, 0))
        
        # Instructions
        if repair['repair_status'] in ['completed', 'customer_notified']:
            ttk.Label(info_frame, text="‚úÖ Thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c s·ª≠a ch·ªØa xong. Vui l√≤ng ƒë·∫øn c·ª≠a h√†ng ƒë·ªÉ nh·∫≠n m√°y.", 
                     font=('Arial', 11, 'bold'), foreground='green').pack(anchor=tk.W, pady=(15, 0))
        elif repair['repair_status'] == 'delivered':
            ttk.Label(info_frame, text="‚úÖ Thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c giao cho kh√°ch h√†ng.", 
                     font=('Arial', 11, 'bold'), foreground='green').pack(anchor=tk.W, pady=(15, 0))
        else:
            ttk.Label(info_frame, text="‚è≥ Thi·∫øt b·ªã ƒëang ƒë∆∞·ª£c s·ª≠a ch·ªØa. Vui l√≤ng ch·ªù th√¥ng b√°o t·ª´ c·ª≠a h√†ng.", 
                     font=('Arial', 11)).pack(anchor=tk.W, pady=(15, 0))
    
    def scan_qr_code(self):
        """Scan QR code using camera"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng qu√©t QR code b·∫±ng camera s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!")
        # This would integrate with camera/QR scanning library
